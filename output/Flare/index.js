// Generated by psc version 0.10.1
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Array = require("../Data.Array");
var Data_Newtype = require("../Data.Newtype");
var Data_NonEmpty = require("../Data.NonEmpty");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_First = require("../Data.Maybe.First");
var Data_Monoid = require("../Data.Monoid");
var Data_Foldable = require("../Data.Foldable");
var Data_Traversable = require("../Data.Traversable");
var Data_Enum = require("../Data.Enum");
var Data_Date = require("../Data.Date");
var Data_Time = require("../Data.Time");
var Control_Apply = require("../Control.Apply");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Color = require("../Color");
var DOM = require("../DOM");
var DOM_Node_Types = require("../DOM.Node.Types");
var Signal = require("../Signal");
var Signal_Channel = require("../Signal.Channel");
var Data_Functor = require("../Data.Functor");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Applicative = require("../Control.Applicative");
var Data_Function = require("../Data.Function");
var Control_Bind = require("../Control.Bind");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Show = require("../Data.Show");
var Data_Date_Component = require("../Data.Date.Component");
var Data_Bounded = require("../Data.Bounded");
var Data_Time_Component = require("../Data.Time.Component");
var Flare = (function () {
    function Flare(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Flare.create = function (value0) {
        return function (value1) {
            return new Flare(value0, value1);
        };
    };
    return Flare;
})();
var UI = function (x) {
    return x;
};
var wrap = function (sig) {
    return UI(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Flare([  ], sig)));
};
var setupFlare = function (v) {
    return function __do() {
        var v1 = v();
        return {
            components: v1.value0, 
            signal: v1.value1
        };
    };
};
var liftSF = function (f) {
    return function (v) {
        return function __do() {
            var v1 = v();
            return new Flare(v1.value0, f(v1.value1));
        };
    };
};
var lift = function (msig) {
    return UI(function __do() {
        var v = msig();
        return new Flare([  ], v);
    });
};
var functorFlare = new Data_Functor.Functor(function (f) {
    return function (v) {
        return new Flare(v.value0, Data_Functor.map(Signal.functorSignal)(f)(v.value1));
    };
});
var functorUI = new Data_Functor.Functor(function (f) {
    return function (v) {
        return UI(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(functorFlare)(f))(v));
    };
});
var foldp = function (f) {
    return function (x0) {
        return liftSF(Signal.foldp(f)(x0));
    };
};
var flareWith = function (controls) {
    return function (handler) {
        return function (v) {
            return function __do() {
                var v1 = v();
                $foreign.removeChildren(controls)();
                Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                return handler(v1.value1)();
            };
        };
    };
};
var runFlareWith = function (controls) {
    return function (handler) {
        return function (ui) {
            return flareWith(controls)(function ($103) {
                return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(handler)($103));
            })(ui);
        };
    };
};
var runFlare = function (controls) {
    return function (target) {
        return runFlareWith(controls)($foreign.renderString(target));
    };
};
var runFlareShow = function (dictShow) {
    return function (controls) {
        return function (target) {
            return function (ui) {
                return runFlare(controls)(target)(Data_Functor.map(functorUI)(Data_Show.show(dictShow))(ui));
            };
        };
    };
};
var fieldset = function (label) {
    return function (v) {
        return UI(function __do() {
            var v1 = v();
            return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
        });
    };
};
var createUI = function (createComp) {
    return function (label) {
        return function ($$default) {
            return UI(function __do() {
                var v = Signal_Channel.channel($$default)();
                var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                var signal = Signal_Channel.subscribe(v);
                return new Flare([ v1 ], signal);
            });
        };
    };
};
var date = function (label) {
    return function ($$default) {
        var toDate = function (v) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(v.year))(function (v1) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(v.month))(function (v2) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(v.day))(function (v3) {
                        return Data_Date.exactDate(v1)(v2)(v3);
                    });
                });
            });
        };
        return Data_Functor.map(functorUI)(function ($104) {
            return Data_Maybe.fromMaybe($$default)(toDate($104));
        })(createUI($foreign.cDate)(label)({
            year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year($$default)), 
            month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month($$default)), 
            day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day($$default))
        }));
    };
};
var date_ = date("");
var $$int = function (label) {
    return createUI($foreign.cIntRange("number")(Data_Bounded.bottom(Data_Bounded.boundedInt))(Data_Bounded.top(Data_Bounded.boundedInt)))(label);
};
var int_ = $$int("");
var intRange = function (label) {
    return function (min) {
        return function (max) {
            return function ($$default) {
                return createUI($foreign.cIntRange("number")(min)(max))(label)($$default);
            };
        };
    };
};
var intRange_ = intRange("");
var intSlider = function (label) {
    return function (min) {
        return function (max) {
            return function ($$default) {
                return createUI($foreign.cIntRange("range")(min)(max))(label)($$default);
            };
        };
    };
};
var intSlider_ = intSlider("");
var number = createUI($foreign.cNumber);
var number_ = number("");
var numberRange = function (label) {
    return function (min) {
        return function (max) {
            return function (step) {
                return function ($$default) {
                    return createUI($foreign.cNumberRange("number")(min)(max)(step))(label)($$default);
                };
            };
        };
    };
};
var numberRange_ = numberRange("");
var numberSlider = function (label) {
    return function (min) {
        return function (max) {
            return function (step) {
                return function ($$default) {
                    return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                };
            };
        };
    };
};
var numberSlider_ = numberSlider("");
var radioGroup = function (dictFoldable) {
    return function (label) {
        return function (v) {
            return function (toString) {
                return createUI($foreign.cRadioGroup(Data_Array.fromFoldable(dictFoldable)(v.value1))(toString))(label)(v.value0);
            };
        };
    };
};
var radioGroup_ = function (dictFoldable) {
    return radioGroup(dictFoldable)("");
};
var select = function (dictFoldable) {
    return function (label) {
        return function (v) {
            return function (toString) {
                return createUI($foreign.cSelect(Data_Array.fromFoldable(dictFoldable)(v.value1))(toString))(label)(v.value0);
            };
        };
    };
};
var select_ = function (dictFoldable) {
    return select(dictFoldable)("");
};
var string = createUI($foreign.cString);
var string_ = string("");
var stringPattern = function (label) {
    return function (pattern) {
        return function ($$default) {
            return createUI($foreign.cStringPattern(pattern))(label)($$default);
        };
    };
};
var stringPattern_ = stringPattern("");
var time = function (label) {
    return function ($$default) {
        var toTime = function (v) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(v.hours)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(v.minutes)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(0)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(0));
        };
        return Data_Functor.map(functorUI)(function ($105) {
            return Data_Maybe.fromMaybe($$default)(toTime($105));
        })(createUI($foreign.cTime)(label)({
            hours: 0, 
            minutes: 30
        }));
    };
};
var time_ = time("");
var color = function (label) {
    return function ($$default) {
        return Data_Functor.map(functorUI)(function ($106) {
            return Data_Maybe.fromMaybe($$default)(Color.fromHexString($106));
        })(createUI($foreign.cColor)(label)(Color.toHexString($$default)));
    };
};
var color_ = color("");
var button = function (label) {
    return function (vDefault) {
        return function (vPressed) {
            return createUI($foreign.cButton(vPressed))(label)(vDefault);
        };
    };
};
var $$boolean = createUI($foreign.cBoolean);
var boolean_ = $$boolean("");
var optional = function (label) {
    return function (enabled) {
        return function (x) {
            var ret = function (v) {
                if (v) {
                    return new Data_Maybe.Just(x);
                };
                if (!v) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Flare line 247, column 9 - line 247, column 28: " + [ v.constructor.name ]);
            };
            return Data_Functor.map(functorUI)(ret)($$boolean(label)(enabled));
        };
    };
};
var optional_ = optional("");
var applyUIFlipped = function (v) {
    return function (v1) {
        return UI(function __do() {
            var v2 = v();
            var v3 = v1();
            return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2.value0)(v3.value0), Control_Apply.apply(Signal.applySignal)(v3.value1)(v2.value1));
        });
    };
};
var applyFlare = new Control_Apply.Apply(function () {
    return functorFlare;
}, function (v) {
    return function (v1) {
        return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0), Control_Apply.apply(Signal.applySignal)(v.value1)(v1.value1));
    };
});
var applyUI = new Control_Apply.Apply(function () {
    return functorUI;
}, function (v) {
    return function (v1) {
        return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Control_Apply.apply(applyFlare))(v)(v1));
    };
});
var semigroupUI = function (dictSemigroup) {
    return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyUI)(Data_Semigroup.append(dictSemigroup)));
};
var applicativeFlare = new Control_Applicative.Applicative(function () {
    return applyFlare;
}, function (x) {
    return new Flare([  ], Control_Applicative.pure(Signal.applicativeSignal)(x));
});
var applicativeUI = new Control_Applicative.Applicative(function () {
    return applyUI;
}, function (x) {
    return UI(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Control_Applicative.pure(applicativeFlare)(x)));
});
var buttons = function (dictTraversable) {
    return function (xs) {
        return function (toString) {
            var toButton = function (x) {
                return button(toString(x))(Data_Maybe.Nothing.value)(new Data_Maybe.Just(x));
            };
            return Data_Functor.map(functorUI)(function ($107) {
                return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictTraversable["__superclass_Data.Foldable.Foldable_1"]())(Data_Maybe_First.monoidFirst)(Data_Maybe_First.First)($107));
            })(Data_Traversable.traverse(dictTraversable)(applicativeUI)(toButton)(xs));
        };
    };
};
var monoidUI = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupUI(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
    }, Control_Applicative.pure(applicativeUI)(Data_Monoid.mempty(dictMonoid)));
};
module.exports = {
    applyUIFlipped: applyUIFlipped, 
    "boolean": $$boolean, 
    boolean_: boolean_, 
    button: button, 
    buttons: buttons, 
    color: color, 
    color_: color_, 
    date: date, 
    date_: date_, 
    fieldset: fieldset, 
    flareWith: flareWith, 
    foldp: foldp, 
    "int": $$int, 
    intRange: intRange, 
    intRange_: intRange_, 
    intSlider: intSlider, 
    intSlider_: intSlider_, 
    int_: int_, 
    lift: lift, 
    liftSF: liftSF, 
    number: number, 
    numberRange: numberRange, 
    numberRange_: numberRange_, 
    numberSlider: numberSlider, 
    numberSlider_: numberSlider_, 
    number_: number_, 
    optional: optional, 
    optional_: optional_, 
    radioGroup: radioGroup, 
    radioGroup_: radioGroup_, 
    runFlare: runFlare, 
    runFlareShow: runFlareShow, 
    runFlareWith: runFlareWith, 
    select: select, 
    select_: select_, 
    setupFlare: setupFlare, 
    string: string, 
    stringPattern: stringPattern, 
    stringPattern_: stringPattern_, 
    string_: string_, 
    time: time, 
    time_: time_, 
    wrap: wrap, 
    functorFlare: functorFlare, 
    applyFlare: applyFlare, 
    applicativeFlare: applicativeFlare, 
    functorUI: functorUI, 
    applyUI: applyUI, 
    applicativeUI: applicativeUI, 
    semigroupUI: semigroupUI, 
    monoidUI: monoidUI
};
