// Generated by psc version 0.10.1
"use strict";
var Prelude = require("../Prelude");
var Calculator_Model = require("../Calculator.Model");
var Calculator_Layout = require("../Calculator.Layout");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var $$Math = require("../Math");
var Data_Array = require("../Data.Array");
var Data_Int = require("../Data.Int");
var Data_Monoid = require("../Data.Monoid");
var Data_Maybe = require("../Data.Maybe");
var Data_Foldable = require("../Data.Foldable");
var Data_Traversable = require("../Data.Traversable");
var DOM = require("../DOM");
var Signal_Channel = require("../Signal.Channel");
var Graphics_Canvas = require("../Graphics.Canvas");
var Control_Monad_Eff_Timer = require("../Control.Monad.Eff.Timer");
var Graphics_Drawing = require("../Graphics.Drawing");
var Graphics_Drawing_Font = require("../Graphics.Drawing.Font");
var Text_Smolder_Markup = require("../Text.Smolder.Markup");
var Signal_DOM = require("../Signal.DOM");
var Signal_Time = require("../Signal.Time");
var Flare = require("../Flare");
var Flare_Smolder = require("../Flare.Smolder");
var Data_Function = require("../Data.Function");
var Control_Category = require("../Control.Category");
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Food = (function () {
    function Food() {

    };
    Food.value = new Food();
    return Food;
})();
var Bin = (function () {
    function Bin() {

    };
    Bin.value = new Bin();
    return Bin;
})();
var Compost = (function () {
    function Compost() {

    };
    Compost.value = new Compost();
    return Compost;
})();
var Garden = (function () {
    function Garden() {

    };
    Garden.value = new Garden();
    return Garden;
})();
var FoodGarden = (function () {
    function FoodGarden() {

    };
    FoodGarden.value = new FoodGarden();
    return FoodGarden;
})();
var Reset = (function () {
    function Reset() {

    };
    Reset.value = new Reset();
    return Reset;
})();
var perform = function (v) {
    if (v instanceof Food) {
        return Data_Function.flip(Data_Array.snoc)({
            title: "Food"
        });
    };
    if (v instanceof Bin) {
        return Data_Function.flip(Data_Array.snoc)({
            title: "Bin"
        });
    };
    if (v instanceof Compost) {
        return Data_Function.flip(Data_Array.snoc)({
            title: "Compost"
        });
    };
    if (v instanceof Garden) {
        return Data_Function.flip(Data_Array.snoc)({
            title: "Garden"
        });
    };
    if (v instanceof FoodGarden) {
        return Data_Function.flip(Data_Array.snoc)({
            title: "Food Garden"
        });
    };
    if (v instanceof Reset) {
        return Data_Function["const"]([  ]);
    };
    throw new Error("Failed pattern match at Main line 57, column 1 - line 57, column 43: " + [ v.constructor.name ]);
};
var label = function (v) {
    if (v instanceof Food) {
        return "Food";
    };
    if (v instanceof Bin) {
        return "Bin";
    };
    if (v instanceof Compost) {
        return "Compost";
    };
    if (v instanceof Garden) {
        return "Garden";
    };
    if (v instanceof FoodGarden) {
        return "FoodGarden";
    };
    if (v instanceof Reset) {
        return "Reset";
    };
    throw new Error("Failed pattern match at Main line 47, column 1 - line 48, column 1: " + [ v.constructor.name ]);
};
var controls = Flare.foldp(Data_Maybe.maybe(Control_Category.id(Control_Category.categoryFn))(perform))([ {
    title: "Food"
} ])(Flare.buttons(Data_Traversable.traversableArray)([ Food.value, Bin.value, Compost.value, Garden.value, FoodGarden.value, Reset.value ])(label));
var ui = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(Calculator_Layout["interface"])(Flare["boolean"]("Info")(true)))(Flare["boolean"]("Grid")(false)))(controls);
var main = Flare_Smolder.runFlareHTML("controls")("output")(ui);
var actions = Flare.applyUIFlipped(Flare.string("Add item:")("Bin"))(Flare.button("Add")(Data_Function.flip(Data_Function["const"]))(Data_Array.cons));
var list = Flare.foldp(Control_Category.id(Control_Category.categoryFn))([ "Food" ])(actions);
module.exports = {
    Food: Food, 
    Bin: Bin, 
    Compost: Compost, 
    Garden: Garden, 
    FoodGarden: FoodGarden, 
    Reset: Reset, 
    actions: actions, 
    controls: controls, 
    label: label, 
    list: list, 
    main: main, 
    perform: perform, 
    ui: ui
};
