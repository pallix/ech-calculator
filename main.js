// Generated by psc-bundle 0.10.1
var PS = {};
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                     
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Dual = function (x) {
      return x;
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var newtypeDual = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Dual);
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  exports["Dual"] = Dual;
  exports["newtypeDual"] = newtypeDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($11) {
              return v(v1($11));
          };
      };
  });
  var newtypeEndo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Endo);
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  exports["Endo"] = Endo;
  exports["newtypeEndo"] = newtypeEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 126, column 3 - line 126, column 30: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 124, column 3 - line 124, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 122, column 3 - line 122, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  }; 
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($170) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($170)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($171) {
                      return Data_Monoid_Endo.Endo(c($171));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.replicate = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      while (list !== emptyList) {
        result[count++] = list.head;
        list = list.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  exports["NonEmpty"] = NonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var head = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["null"] = $$null;
  exports["singleton"] = singleton;
  exports["filter"] = $foreign.filter;
  exports["replicate"] = $foreign.replicate;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["joinWith"] = $foreign.joinWith;
  exports["split"] = $foreign.split;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };                  
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericShowPrec = function (v) {
      return function (v1) {
          if (v1 instanceof SProd) {
              if (Data_Array["null"](v1.value1)) {
                  return v1.value0;
              };
              if (Data_Boolean.otherwise) {
                  var showParen = function (v2) {
                      return function (x) {
                          if (!v2) {
                              return x;
                          };
                          if (v2) {
                              return "(" + (x + ")");
                          };
                          throw new Error("Failed pattern match at Data.Generic line 396, column 7 - line 396, column 28: " + [ v2.constructor.name, x.constructor.name ]);
                      };
                  };
                  return showParen(v > 10)(v1.value0 + (" " + Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return genericShowPrec(11)(force(x));
                  })(v1.value1))));
              };
          };
          if (v1 instanceof SRecord) {
              var showLabelPart = function (x) {
                  return x.recLabel + (": " + genericShowPrec(0)(force(x.recValue)));
              };
              return "{" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showLabelPart)(v1.value0)) + "}");
          };
          if (v1 instanceof SBoolean) {
              return Data_Show.show(Data_Show.showBoolean)(v1.value0);
          };
          if (v1 instanceof SInt) {
              return Data_Show.show(Data_Show.showInt)(v1.value0);
          };
          if (v1 instanceof SNumber) {
              return Data_Show.show(Data_Show.showNumber)(v1.value0);
          };
          if (v1 instanceof SString) {
              return Data_Show.show(Data_Show.showString)(v1.value0);
          };
          if (v1 instanceof SChar) {
              return Data_Show.show(Data_Show.showChar)(v1.value0);
          };
          if (v1 instanceof SArray) {
              return "[" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return genericShowPrec(0)(force(x));
              })(v1.value0)) + "]");
          };
          if (v1 instanceof SUnit) {
              return "unit";
          };
          throw new Error("Failed pattern match at Data.Generic line 390, column 1 - line 398, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var gShow = function (dictGeneric) {
      return function ($274) {
          return genericShowPrec(0)(toSpine(dictGeneric)($274));
      };
  };
  exports["SigProd"] = SigProd;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gShow"] = gShow;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports.ceil = Math.ceil;

  exports.floor = Math.floor;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Math"];
  exports["trunc"] = $foreign.trunc;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Int = PS["Data.Int"];
  var $$Math = PS["Math"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Transform = (function () {
      function Transform(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Transform.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Transform(value0, value1, value2);
              };
          };
      };
      return Transform;
  })();
  var Year = (function () {
      function Year() {

      };
      Year.value = new Year();
      return Year;
  })();
  var Month = (function () {
      function Month() {

      };
      Month.value = new Month();
      return Month;
  })();
  var Day = (function () {
      function Day() {

      };
      Day.value = new Day();
      return Day;
  })();
  var SystemParams = (function () {
      function SystemParams(value0) {
          this.value0 = value0;
      };
      SystemParams.create = function (value0) {
          return new SystemParams(value0);
      };
      return SystemParams;
  })();

  /**
 *  -- Kg / Person / Day
 *  data Weight a =
 *  -- L / Person / Day
 *  data Volume a =
 */  
  var PersonScale = (function () {
      function PersonScale() {

      };
      PersonScale.value = new PersonScale();
      return PersonScale;
  })();

  /**
 *  -- Kg / Person / Day
 *  data Weight a =
 *  -- L / Person / Day
 *  data Volume a =
 */  
  var HouseholdScale = (function () {
      function HouseholdScale() {

      };
      HouseholdScale.value = new HouseholdScale();
      return HouseholdScale;
  })();

  /**
 *  -- Kg / Person / Day
 *  data Weight a =
 *  -- L / Person / Day
 *  data Volume a =
 */  
  var EstateScale = (function () {
      function EstateScale() {

      };
      EstateScale.value = new EstateScale();
      return EstateScale;
  })();
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();

  /**
 *  Units
 */  
  var Weight = (function () {
      function Weight(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Weight.create = function (value0) {
          return function (value1) {
              return new Weight(value0, value1);
          };
      };
      return Weight;
  })();

  /**
 *  Units
 */  
  var Volume = (function () {
      function Volume(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Volume.create = function (value0) {
          return function (value1) {
              return new Volume(value0, value1);
          };
      };
      return Volume;
  })();

  /**
 *  Units
 */  
  var IncompatibleQuantity = (function () {
      function IncompatibleQuantity() {

      };
      IncompatibleQuantity.value = new IncompatibleQuantity();
      return IncompatibleQuantity;
  })();

  /**
 *  Units
 */  
  var ZeroQuantity = (function () {
      function ZeroQuantity() {

      };
      ZeroQuantity.value = new ZeroQuantity();
      return ZeroQuantity;
  })();

  /**
 *  model for the event sourcing
 */  
  var AllProcess = (function () {
      function AllProcess() {

      };
      AllProcess.value = new AllProcess();
      return AllProcess;
  })();

  /**
 *  model for the event sourcing
 */  
  var Shopping = (function () {
      function Shopping() {

      };
      Shopping.value = new Shopping();
      return Shopping;
  })();

  /**
 *  model for the event sourcing
 */  
  var Eating = (function () {
      function Eating() {

      };
      Eating.value = new Eating();
      return Eating;
  })();

  /**
 *  model for the event sourcing
 */  
  var Binning = (function () {
      function Binning() {

      };
      Binning.value = new Binning();
      return Binning;
  })();

  /**
 *  model for the event sourcing
 */  
  var WormComposting = (function () {
      function WormComposting() {

      };
      WormComposting.value = new WormComposting();
      return WormComposting;
  })();

  /**
 *  model for the event sourcing
 */  
  var ManagingWaste = (function () {
      function ManagingWaste() {

      };
      ManagingWaste.value = new ManagingWaste();
      return ManagingWaste;
  })();
  var EatingOnly = (function () {
      function EatingOnly() {

      };
      EatingOnly.value = new EatingOnly();
      return EatingOnly;
  })();
  var EatingBinning = (function () {
      function EatingBinning() {

      };
      EatingBinning.value = new EatingBinning();
      return EatingBinning;
  })();
  var EatingBinningWormComposting = (function () {
      function EatingBinningWormComposting() {

      };
      EatingBinningWormComposting.value = new EatingBinningWormComposting();
      return EatingBinningWormComposting;
  })();
  var EatingBinningWormCompostingGarden = (function () {
      function EatingBinningWormCompostingGarden() {

      };
      EatingBinningWormCompostingGarden.value = new EatingBinningWormCompostingGarden();
      return EatingBinningWormCompostingGarden;
  })();
  var EatingBinningWormCompostingFoodGarden = (function () {
      function EatingBinningWormCompostingFoodGarden() {

      };
      EatingBinningWormCompostingFoodGarden.value = new EatingBinningWormCompostingFoodGarden();
      return EatingBinningWormCompostingFoodGarden;
  })();
  var EatingBinningWormCompostingGardenWatering = (function () {
      function EatingBinningWormCompostingGardenWatering() {

      };
      EatingBinningWormCompostingGardenWatering.value = new EatingBinningWormCompostingGardenWatering();
      return EatingBinningWormCompostingGardenWatering;
  })();
  var EatingBinningWormCompostingFoodGardenWatering = (function () {
      function EatingBinningWormCompostingFoodGardenWatering() {

      };
      EatingBinningWormCompostingFoodGardenWatering.value = new EatingBinningWormCompostingFoodGardenWatering();
      return EatingBinningWormCompostingFoodGardenWatering;
  })();
  var EatingBinningWormCompostingGardenRainwater = (function () {
      function EatingBinningWormCompostingGardenRainwater() {

      };
      EatingBinningWormCompostingGardenRainwater.value = new EatingBinningWormCompostingGardenRainwater();
      return EatingBinningWormCompostingGardenRainwater;
  })();
  var EatingBinningWormCompostingFoodGardenRainwater = (function () {
      function EatingBinningWormCompostingFoodGardenRainwater() {

      };
      EatingBinningWormCompostingFoodGardenRainwater.value = new EatingBinningWormCompostingFoodGardenRainwater();
      return EatingBinningWormCompostingFoodGardenRainwater;
  })();
  var EatingBinningWormCompostingFoodSharing = (function () {
      function EatingBinningWormCompostingFoodSharing() {

      };
      EatingBinningWormCompostingFoodSharing.value = new EatingBinningWormCompostingFoodSharing();
      return EatingBinningWormCompostingFoodSharing;
  })();
  var NotImplemented = (function () {
      function NotImplemented() {

      };
      NotImplemented.value = new NotImplemented();
      return NotImplemented;
  })();
  var Edible = (function () {
      function Edible() {

      };
      Edible.value = new Edible();
      return Edible;
  })();
  var NonEdible = (function () {
      function NonEdible() {

      };
      NonEdible.value = new NonEdible();
      return NonEdible;
  })();
  var Shopped = (function () {
      function Shopped() {

      };
      Shopped.value = new Shopped();
      return Shopped;
  })();
  var Cooked = (function () {
      function Cooked() {

      };
      Cooked.value = new Cooked();
      return Cooked;
  })();
  var AllMatterProperty = (function () {
      function AllMatterProperty() {

      };
      AllMatterProperty.value = new AllMatterProperty();
      return AllMatterProperty;
  })();
  var AllMatter = (function () {
      function AllMatter() {

      };
      AllMatter.value = new AllMatter();
      return AllMatter;
  })();
  var Food = (function () {
      function Food() {

      };
      Food.value = new Food();
      return Food;
  })();
  var Waste = (function () {
      function Waste() {

      };
      Waste.value = new Waste();
      return Waste;
  })();
  var GreyWater = (function () {
      function GreyWater() {

      };
      GreyWater.value = new GreyWater();
      return GreyWater;
  })();
  var Compost = (function () {
      function Compost() {

      };
      Compost.value = new Compost();
      return Compost;
  })();
  var Entry = (function () {
      function Entry(value0) {
          this.value0 = value0;
      };
      Entry.create = function (value0) {
          return new Entry(value0);
      };
      return Entry;
  })();
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var SystemState = (function () {
      function SystemState(value0) {
          this.value0 = value0;
      };
      SystemState.create = function (value0) {
          return new SystemState(value0);
      };
      return SystemState;
  })();
  var wormCompostingParam = {
      title: "Wormery", 
      compostableRatio: new Ratio(Waste.value, {
          ratio: 0.6
      }), 
      compostingYield: new Transform(Waste.value, Compost.value, {
          ratio: 0.125 * 4.0
      })
  };
  var showQuantity = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Weight) {
              return Data_Show.show(Data_Show.showNumber)($$Math.trunc(v.value1)) + "Kg";
          };
          if (v instanceof Volume) {
              return Data_Show.show(Data_Show.showNumber)($$Math.trunc(v.value1)) + "L";
          };
          if (v instanceof IncompatibleQuantity) {
              return "IncompatibleQuantity";
          };
          if (v instanceof ZeroQuantity) {
              return "0";
          };
          throw new Error("Failed pattern match at Calculator.Model line 211, column 5 - line 212, column 5: " + [ v.constructor.name ]);
      });
  };
  var scaleQty = function (v) {
      return function (v1) {
          return function (q) {
              var timeFactor = (function () {
                  if (v.time instanceof Day) {
                      return 1.0 / 365.25;
                  };
                  if (v.time instanceof Month) {
                      return 1.0 / 12.0;
                  };
                  if (v.time instanceof Year) {
                      return 1.0;
                  };
                  throw new Error("Failed pattern match at Calculator.Model line 401, column 22 - line 405, column 9: " + [ v.time.constructor.name ]);
              })();
              var scaleFactor = (function () {
                  if (v.scale instanceof PersonScale) {
                      return 1.0;
                  };
                  if (v.scale instanceof HouseholdScale) {
                      return v1.value0.estateAveragePersonPerHousehold;
                  };
                  if (v.scale instanceof EstateScale) {
                      return Data_Int.toNumber(v1.value0.estatePopulation);
                  };
                  throw new Error("Failed pattern match at Calculator.Model line 397, column 23 - line 400, column 51: " + [ v.scale.constructor.name ]);
              })();
              var applyFactors = function (qty) {
                  return scaleFactor * timeFactor * qty;
              };
              var scaleQ = function (v2) {
                  if (v2 instanceof Weight) {
                      return new Weight(v2.value0, applyFactors(v2.value1));
                  };
                  if (v2 instanceof Volume) {
                      return new Volume(v2.value0, applyFactors(v2.value1));
                  };
                  if (v2 instanceof ZeroQuantity) {
                      return ZeroQuantity.value;
                  };
                  if (v2 instanceof IncompatibleQuantity) {
                      return IncompatibleQuantity.value;
                  };
                  throw new Error("Failed pattern match at Calculator.Model line 395, column 1 - line 409, column 59: " + [ v2.constructor.name ]);
              };
              return scaleQ(q);
          };
      };
  };
  var scaleEntries = function (systemScale) {
      return function (systemParams) {
          return function (v) {
              var convertEntries = function (v1) {
                  return Entry.create((function () {
                      var $90 = {};
                      for (var $91 in v1.value0) {
                          if (v1.value0.hasOwnProperty($91)) {
                              $90[$91] = v1.value0[$91];
                          };
                      };
                      $90.quantity = scaleQty(systemScale)(systemParams)(v1.value0.quantity);
                      return $90;
                  })());
              };
              var scaledEntries = Data_Functor.map(Data_Functor.functorArray)(convertEntries)(v.value0);
              return State.create(scaledEntries);
          };
      };
  };
  var processEq = new Data_Eq.Eq(function (a) {
      return function (b) {
          var $96 = [ a, b ];
          if ($96.length === 2 && ($96[0] instanceof Shopping && $96[1] instanceof Shopping)) {
              return true;
          };
          if ($96.length === 2 && ($96[0] instanceof Eating && $96[1] instanceof Eating)) {
              return true;
          };
          if ($96.length === 2 && ($96[0] instanceof Binning && $96[1] instanceof Binning)) {
              return true;
          };
          if ($96.length === 2 && ($96[0] instanceof ManagingWaste && $96[1] instanceof ManagingWaste)) {
              return true;
          };
          if ($96.length === 2 && ($96[0] instanceof WormComposting && $96[1] instanceof WormComposting)) {
              return true;
          };
          if ($96.length === 2 && $96[0] instanceof AllProcess) {
              return true;
          };
          if ($96.length === 2 && $96[1] instanceof AllProcess) {
              return true;
          };
          return false;
      };
  });
  var negQty = function (v) {
      if (v instanceof Weight) {
          return new Weight(v.value0, -v.value1);
      };
      if (v instanceof Volume) {
          return new Volume(v.value0, -v.value1);
      };
      if (v instanceof IncompatibleQuantity) {
          return IncompatibleQuantity.value;
      };
      if (v instanceof ZeroQuantity) {
          return ZeroQuantity.value;
      };
      throw new Error("Failed pattern match at Calculator.Model line 84, column 1 - line 84, column 41: " + [ v.constructor.name ]);
  };
  var subQty = function (v) {
      return function (v1) {
          if (v instanceof Weight && v1 instanceof Weight) {
              return new Weight(v.value0, v.value1 - v1.value1);
          };
          if (v instanceof Volume && v1 instanceof Volume) {
              return new Weight(v.value0, v.value1 - v1.value1);
          };
          if (v1 instanceof ZeroQuantity) {
              return v;
          };
          if (v instanceof ZeroQuantity) {
              return negQty(v1);
          };
          return IncompatibleQuantity.value;
      };
  };
  var mergeQty = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Volume && v1 instanceof Volume) {
              return new Volume(v.value0, v.value1 + v1.value1);
          };
          if (v instanceof Weight && v1 instanceof Weight) {
              return new Weight(v.value0, v.value1 + v1.value1);
          };
          if (v1 instanceof ZeroQuantity) {
              return v;
          };
          if (v instanceof ZeroQuantity) {
              return v1;
          };
          return IncompatibleQuantity.value;
      };
  });
  var matterProperty = new Data_Eq.Eq(function (a) {
      return function (b) {
          var $136 = [ a, b ];
          if ($136.length === 2 && ($136[0] instanceof Edible && $136[1] instanceof Edible)) {
              return true;
          };
          if ($136.length === 2 && ($136[0] instanceof NonEdible && $136[1] instanceof NonEdible)) {
              return true;
          };
          if ($136.length === 2 && ($136[0] instanceof Shopped && $136[1] instanceof Shopped)) {
              return true;
          };
          if ($136.length === 2 && ($136[0] instanceof Cooked && $136[1] instanceof Cooked)) {
              return true;
          };
          if ($136.length === 2 && $136[0] instanceof AllMatterProperty) {
              return true;
          };
          if ($136.length === 2 && $136[1] instanceof AllMatterProperty) {
              return true;
          };
          return false;
      };
  });
  var matterEq = new Data_Eq.Eq(function (a) {
      return function (b) {
          var $149 = [ a, b ];
          if ($149.length === 2 && ($149[0] instanceof Food && $149[1] instanceof Food)) {
              return true;
          };
          if ($149.length === 2 && ($149[0] instanceof Waste && $149[1] instanceof Waste)) {
              return true;
          };
          if ($149.length === 2 && $149[0] instanceof AllMatter) {
              return true;
          };
          if ($149.length === 2 && $149[1] instanceof AllMatter) {
              return true;
          };
          return false;
      };
  });
  var managedWasteParam = {
      title: "Managed Waste", 
      collectedWasteRatio: new Ratio(Waste.value, {
          ratio: 1.0
      })
  };

  /**
 * 
 *  Quantities
 * 
 */  
  var id = function (a) {
      return a;
  };
  var hasProcess = function (process) {
      return function (v) {
          return Data_Eq.eq(processEq)(v.value0.process)(process);
      };
  };
  var hasMatterProperty = function (matterProperty1) {
      return function (v) {
          return Data_Eq.eq(matterProperty)(v.value0.matterProperty)(matterProperty1);
      };
  };
  var hasMatter = function (matter) {
      return function (v) {
          return Data_Eq.eq(matterEq)(v.value0.matter)(matter);
      };
  };
  var initialState = function (process) {
      return function (matter) {
          return function (matterProperty1) {
              return function (v) {
                  var qualifies = Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(hasProcess(process))(Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(hasMatter(matter))(hasMatterProperty(matterProperty1)));
                  var states$prime = Data_Array.filter(qualifies)(v.value0);
                  var getQuantity = function (v1) {
                      return v1.value0.quantity;
                  };
                  var quantities = Data_Functor.map(Data_Functor.functorArray)(getQuantity)(states$prime);
                  return Data_Maybe.maybe(ZeroQuantity.value)(id)(Data_Array.head(quantities));
              };
          };
      };
  }; 
  var genericMatter = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Calculator.Model.AllMatter" && v.value1.length === 0)) {
          return new Data_Maybe.Just(AllMatter.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Calculator.Model.Food" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Food.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Calculator.Model.Waste" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Waste.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Calculator.Model.GreyWater" && v.value1.length === 0)) {
          return new Data_Maybe.Just(GreyWater.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Calculator.Model.Compost" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Compost.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Calculator.Model.Matter", [ {
          sigConstructor: "Calculator.Model.AllMatter", 
          sigValues: [  ]
      }, {
          sigConstructor: "Calculator.Model.Food", 
          sigValues: [  ]
      }, {
          sigConstructor: "Calculator.Model.Waste", 
          sigValues: [  ]
      }, {
          sigConstructor: "Calculator.Model.GreyWater", 
          sigValues: [  ]
      }, {
          sigConstructor: "Calculator.Model.Compost", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof AllMatter) {
          return new Data_Generic.SProd("Calculator.Model.AllMatter", [  ]);
      };
      if (v instanceof Food) {
          return new Data_Generic.SProd("Calculator.Model.Food", [  ]);
      };
      if (v instanceof Waste) {
          return new Data_Generic.SProd("Calculator.Model.Waste", [  ]);
      };
      if (v instanceof GreyWater) {
          return new Data_Generic.SProd("Calculator.Model.GreyWater", [  ]);
      };
      if (v instanceof Compost) {
          return new Data_Generic.SProd("Calculator.Model.Compost", [  ]);
      };
      throw new Error("Failed pattern match at Calculator.Model line 133, column 1 - line 133, column 48: " + [ v.constructor.name ]);
  });
  var showMatter = new Data_Show.Show(Data_Generic.gShow(genericMatter));
  var foodSharingParam = {
      title: "Food Sharing", 
      sharedFoodRatio: new Ratio(Food.value, {
          ratio: 1.0
      })
  };
  var foldState = function (process) {
      return function (matter) {
          return function (matterProperty1) {
              return function (v) {
                  var sumQuantity = function (acc) {
                      return function (qty) {
                          return Data_Semigroup.append(mergeQty)(acc)(qty);
                      };
                  };
                  var qualifies = Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(hasProcess(process))(Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(hasMatter(matter))(hasMatterProperty(matterProperty1)));
                  var states$prime = Data_Array.filter(qualifies)(v.value0);
                  var getQuantity = function (v1) {
                      return v1.value0.quantity;
                  };
                  var quantities = Data_Functor.map(Data_Functor.functorArray)(getQuantity)(states$prime);
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(sumQuantity)(ZeroQuantity.value)(quantities);
              };
          };
      };
  };
  var eatingParam = {
      title: "Eating", 
      eatedFoodRatio: new Ratio(Food.value, {
          ratio: 0.81
      }), 
      edibleWasteProcess: new Transform(Food.value, Food.value, {
          ratio: 0.6
      })
  };
  var complementOneRatioTransform = function (v) {
      return new Transform(v.value0, v.value0, {
          ratio: 1.0 - v.value1.ratio
      });
  };
  var binningParam = {
      title: "Binning", 
      compactingRatio: new Ratio(Waste.value, {
          ratio: 0.0
      })
  };
  var initProcessParams = {
      eatingParam: eatingParam, 
      binningParam: binningParam, 
      wormCompostingParam: wormCompostingParam, 
      managedWasteParam: managedWasteParam, 
      foodSharingParam: foodSharingParam
  };
  var applyTransform = function (v) {
      var createQuantity = function (v1) {
          if (v1 instanceof Weight) {
              return Weight.create(v.value1)(v.value2.ratio * v1.value1);
          };
          if (v1 instanceof Volume) {
              return Weight.create(v.value1)(v.value2.ratio * v1.value1);
          };
          if (v1 instanceof ZeroQuantity) {
              return ZeroQuantity.value;
          };
          if (v1 instanceof IncompatibleQuantity) {
              return IncompatibleQuantity.value;
          };
          throw new Error("Failed pattern match at Calculator.Model line 301, column 5 - line 301, column 51: " + [ v1.constructor.name ]);
      };
      return createQuantity;
  };
  var applyRatio = function (v) {
      return function (qty) {
          var appRatio = function (r) {
              return function (v1) {
                  if (v1 instanceof Weight) {
                      return Weight.create(v1.value0)(r * v1.value1);
                  };
                  if (v1 instanceof Volume) {
                      return Volume.create(v1.value0)(r * v1.value1);
                  };
                  if (v1 instanceof ZeroQuantity) {
                      return ZeroQuantity.value;
                  };
                  if (v1 instanceof IncompatibleQuantity) {
                      return IncompatibleQuantity.value;
                  };
                  throw new Error("Failed pattern match at Calculator.Model line 311, column 5 - line 311, column 47: " + [ r.constructor.name, v1.constructor.name ]);
              };
          };
          return appRatio(v.value1.ratio)(qty);
      };
  };
  var composting_EatingBinningWormComposting = function (v) {
      return function (v1) {
          var wastedFood = foldState(Eating.value)(Waste.value)(AllMatterProperty.value)(v1);
          var compostableWaste = applyRatio(v.compostableRatio)(wastedFood);
          var compostProduct = applyTransform(v.compostingYield)(compostableWaste);
          return State.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value0)([ new Entry({
              process: Eating.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(compostableWaste)
          }), new Entry({
              process: WormComposting.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: compostableWaste
          }), new Entry({
              process: WormComposting.value, 
              matter: Compost.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: compostProduct
          }), new Entry({
              process: WormComposting.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(compostableWaste)
          }) ]));
      };
  };
  var eating = function (v) {
      return function (v1) {
          var shoppedFood = foldState(Shopping.value)(Food.value)(AllMatterProperty.value)(v1);
          var wasted = applyTransform(complementOneRatioTransform(v.eatedFoodRatio))(shoppedFood);
          var eatedFood = applyRatio(v.eatedFoodRatio)(shoppedFood);
          return State.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value0)([ new Entry({
              process: Shopping.value, 
              matter: Food.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(shoppedFood)
          }), new Entry({
              process: Eating.value, 
              matter: Food.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: eatedFood
          }), new Entry({
              process: Eating.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: wasted
          }) ]));
      };
  };
  var addQty = function (v) {
      return function (v1) {
          if (v instanceof Weight && v1 instanceof Weight) {
              return new Weight(v.value0, v.value1 + v1.value1);
          };
          if (v instanceof Volume && v1 instanceof Volume) {
              return new Weight(v.value0, v.value1 + v1.value1);
          };
          if (v1 instanceof ZeroQuantity) {
              return v;
          };
          if (v instanceof ZeroQuantity) {
              return v1;
          };
          return IncompatibleQuantity.value;
      };
  };
  var binning = function (v) {
      return function (v1) {
          var foodWormComposting = foldState(WormComposting.value)(Waste.value)(AllMatterProperty.value)(v1);
          var foodWaste = foldState(Eating.value)(Waste.value)(AllMatterProperty.value)(v1);
          return State.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value0)([ new Entry({
              process: Eating.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(foodWaste)
          }), new Entry({
              process: WormComposting.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(foodWormComposting)
          }), new Entry({
              process: Binning.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: addQty(foodWaste)(foodWormComposting)
          }) ]));
      };
  };

  /**
 *  compostWaste = subQty compostableWaste compostProduct
 */  
  var managingWaste = function (v) {
      return function (v1) {
          var foodWaste = foldState(Eating.value)(Waste.value)(AllMatterProperty.value)(v1);
          var binnedWaste = foldState(Binning.value)(Waste.value)(AllMatterProperty.value)(v1);
          return State.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value0)([ new Entry({
              process: Eating.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(foodWaste)
          }), new Entry({
              process: Binning.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: negQty(binnedWaste)
          }), new Entry({
              process: ManagingWaste.value, 
              matter: Waste.value, 
              matterProperty: AllMatterProperty.value, 
              quantity: addQty(binnedWaste)(foodWaste)
          }) ]));
      };
  };
  var nexusSystem = function (v) {
      var state$prime = scaleEntries(v.value0.scale)(v.value0.systemParams)(v.value0.state);
      var endState = (function () {
          if (v.value0.current instanceof EatingOnly) {
              return managingWaste(v.value0.processParams.managedWasteParam)(eating(v.value0.processParams.eatingParam)(state$prime));
          };
          if (v.value0.current instanceof EatingBinning) {
              return managingWaste(v.value0.processParams.managedWasteParam)(binning(v.value0.processParams.binningParam)(eating(v.value0.processParams.eatingParam)(state$prime)));
          };
          if (v.value0.current instanceof EatingBinningWormComposting) {
              return managingWaste(v.value0.processParams.managedWasteParam)(binning(v.value0.processParams.binningParam)(composting_EatingBinningWormComposting(v.value0.processParams.wormCompostingParam)(eating(v.value0.processParams.eatingParam)(state$prime))));
          };
          return new State([  ]);
      })();
      return SystemState.create((function () {
          var $351 = {};
          for (var $352 in v.value0) {
              if (v.value0.hasOwnProperty($352)) {
                  $351[$352] = v.value0[$352];
              };
          };
          $351.state = endState;
          return $351;
      })());
  };
  exports["Entry"] = Entry;
  exports["AllMatter"] = AllMatter;
  exports["Food"] = Food;
  exports["Waste"] = Waste;
  exports["GreyWater"] = GreyWater;
  exports["Compost"] = Compost;
  exports["Edible"] = Edible;
  exports["NonEdible"] = NonEdible;
  exports["Shopped"] = Shopped;
  exports["Cooked"] = Cooked;
  exports["AllMatterProperty"] = AllMatterProperty;
  exports["EatingOnly"] = EatingOnly;
  exports["EatingBinning"] = EatingBinning;
  exports["EatingBinningWormComposting"] = EatingBinningWormComposting;
  exports["EatingBinningWormCompostingGarden"] = EatingBinningWormCompostingGarden;
  exports["EatingBinningWormCompostingFoodGarden"] = EatingBinningWormCompostingFoodGarden;
  exports["EatingBinningWormCompostingGardenWatering"] = EatingBinningWormCompostingGardenWatering;
  exports["EatingBinningWormCompostingFoodGardenWatering"] = EatingBinningWormCompostingFoodGardenWatering;
  exports["EatingBinningWormCompostingGardenRainwater"] = EatingBinningWormCompostingGardenRainwater;
  exports["EatingBinningWormCompostingFoodGardenRainwater"] = EatingBinningWormCompostingFoodGardenRainwater;
  exports["EatingBinningWormCompostingFoodSharing"] = EatingBinningWormCompostingFoodSharing;
  exports["NotImplemented"] = NotImplemented;
  exports["AllProcess"] = AllProcess;
  exports["Shopping"] = Shopping;
  exports["Eating"] = Eating;
  exports["Binning"] = Binning;
  exports["WormComposting"] = WormComposting;
  exports["ManagingWaste"] = ManagingWaste;
  exports["Weight"] = Weight;
  exports["Volume"] = Volume;
  exports["IncompatibleQuantity"] = IncompatibleQuantity;
  exports["ZeroQuantity"] = ZeroQuantity;
  exports["Ratio"] = Ratio;
  exports["PersonScale"] = PersonScale;
  exports["HouseholdScale"] = HouseholdScale;
  exports["EstateScale"] = EstateScale;
  exports["State"] = State;
  exports["SystemParams"] = SystemParams;
  exports["SystemState"] = SystemState;
  exports["Year"] = Year;
  exports["Month"] = Month;
  exports["Day"] = Day;
  exports["Transform"] = Transform;
  exports["addQty"] = addQty;
  exports["foldState"] = foldState;
  exports["initProcessParams"] = initProcessParams;
  exports["initialState"] = initialState;
  exports["nexusSystem"] = nexusSystem;
  exports["subQty"] = subQty;
  exports["processEq"] = processEq;
  exports["genericMatter"] = genericMatter;
  exports["showMatter"] = showMatter;
  exports["matterEq"] = matterEq;
  exports["matterProperty"] = matterProperty;
  exports["showQuantity"] = showQuantity;
  exports["mergeQty"] = mergeQty;
})(PS["Calculator.Model"] = PS["Calculator.Model"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 352, column 1 - line 355, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $33 = Data_CatQueue.uncons(xs);
                          if ($33 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($33 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List_Types.Cons(k($33.value0.value0), ys);
                              xs = $33.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ $33.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $38 = Data_CatQueue["null"](v.value1);
              if ($38) {
                  return CatNil.value;
              };
              if (!$38) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 103, column 39 - line 103, column 89: " + [ $38.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  };
  var foldMap = function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof CatNil) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof CatCons) {
                  var d = (function () {
                      var $43 = Data_CatQueue["null"](v.value1);
                      if ($43) {
                          return CatNil.value;
                      };
                      if (!$43) {
                          return foldr(link)(CatNil.value)(v.value1);
                      };
                      throw new Error("Failed pattern match at Data.CatList line 144, column 11 - line 144, column 61: " + [ $43.constructor.name ]);
                  })();
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(foldMap(dictMonoid)(f)(d));
              };
              throw new Error("Failed pattern match at Data.CatList line 142, column 1 - line 142, column 26: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return foldMap(dictMonoid)(f)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldlDefault(foldableCatList)(f)(s)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var map = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $50 = Data_CatQueue["null"](v1.value1);
                  if ($50) {
                      return CatNil.value;
                  };
                  if (!$50) {
                      return foldr(link)(CatNil.value)(v1.value1);
                  };
                  throw new Error("Failed pattern match at Data.CatList line 138, column 11 - line 138, column 61: " + [ $50.constructor.name ]);
              })();
              return cons(v(v1.value0))(map(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 136, column 1 - line 136, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var functorCatList = new Data_Functor.Functor(map);
  var singleton = function (a) {
      return cons(a)(CatNil.value);
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var monadCatList = new Control_Monad.Monad(function () {
      return applicativeCatList;
  }, function () {
      return bindCatList;
  });
  var bindCatList = new Control_Bind.Bind(function () {
      return applyCatList;
  }, Data_Function.flip(foldMap(monoidCatList)));
  var applyCatList = new Control_Apply.Apply(function () {
      return functorCatList;
  }, Control_Monad.ap(monadCatList));
  var applicativeCatList = new Control_Applicative.Applicative(function () {
      return applyCatList;
  }, singleton);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
  exports["applyCatList"] = applyCatList;
  exports["applicativeCatList"] = applicativeCatList;
  exports["bindCatList"] = bindCatList;
  exports["monadCatList"] = monadCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Element(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var text = function (s) {
      return new Content(s, new Return(Data_Unit.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
      };
  };                                                                
  var leaf = function (el) {
      return new Element(el, Data_Maybe.Nothing.value, Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
  };
  var functorMarkupM = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Data_Functor.map(functorMarkupM)(f)(v.value4));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Data_Functor.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 55, column 3 - line 55, column 88: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute(Control_Applicative.pure(Data_CatList.applicativeCatList)(new Attr(key, value)));
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value2)(v1.value0), v.value3, v.value4);
          };
          return v;
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Control_Monad.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Control_Bind.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Control_Bind.bind(bindMarkupM)(v.value4)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Control_Bind.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 66, column 3 - line 66, column 90: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Control_Apply.Apply(function () {
      return functorMarkupM;
  }, Control_Monad.ap(monadMarkupM));
  var applicativeMarkupM = new Control_Applicative.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Data_Semigroup.Semigroup(function (x) {
      return function (y) {
          return Control_Apply.applySecond(applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Data_Unit.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["attribute"] = attribute;
  exports["leaf"] = leaf;
  exports["parent"] = parent;
  exports["text"] = text;
  exports["with"] = $$with;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var ul = Text_Smolder_Markup.parent("ul");    
  var p = Text_Smolder_Markup.parent("p");    
  var li = Text_Smolder_Markup.parent("li");    
  var img = Text_Smolder_Markup.leaf("img");
  var h2 = Text_Smolder_Markup.parent("h2");
  var div = Text_Smolder_Markup.parent("div");  
  var a = Text_Smolder_Markup.parent("a");
  exports["a"] = a;
  exports["div"] = div;
  exports["h2"] = h2;
  exports["img"] = img;
  exports["li"] = li;
  exports["p"] = p;
  exports["ul"] = ul;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"]; 
  var src = Text_Smolder_Markup.attribute("src");    
  var id = Text_Smolder_Markup.attribute("id");    
  var className = Text_Smolder_Markup.attribute("class");
  exports["className"] = className;
  exports["id"] = id;
  exports["src"] = src;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Calculator_Model = PS["Calculator.Model"];
  var $$Math = PS["Math"];
  var CSS = PS["CSS"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var CSS_Render = PS["CSS.Render"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var managedWaste = Calculator_Model.foldState(Calculator_Model.ManagingWaste.value)(Calculator_Model.Waste.value)(Calculator_Model.AllMatterProperty.value);
  var initialShoppedFood = Calculator_Model.initialState(Calculator_Model.Shopping.value)(Calculator_Model.Food.value)(Calculator_Model.AllMatterProperty.value);
  var initialCompostedWaste = Calculator_Model.initialState(Calculator_Model.WormComposting.value)(Calculator_Model.Waste.value)(Calculator_Model.AllMatterProperty.value);
  var initialBinnedFoodWaste = Calculator_Model.initialState(Calculator_Model.Eating.value)(Calculator_Model.Waste.value)(Calculator_Model.AllMatterProperty.value);
  var hex = function (hover) {
      return function (grid) {
          return function (item) {
              var image = function (v) {
                  if (v === "Eating") {
                      return "/images/cooking.svg";
                  };
                  if (v === "Binning") {
                      return "/images/rubbish_bin.svg";
                  };
                  if (v === "Wormery") {
                      return "/images/composting.svg";
                  };
                  if (v === "Garden") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Food Garden") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Shopped Food") {
                      return "/images/shop_food.svg";
                  };
                  if (v === "Managed Waste") {
                      return "/images/managed_waste.svg";
                  };
                  if (v === "_") {
                      return "https://dummyimage.com/200x200&text=+";
                  };
                  return "";
              };
              var hoverClass = function (v) {
                  return function (v1) {
                      if (!v && !v1) {
                          return Text_Smolder_HTML_Attributes.className("hexIn");
                      };
                      if (v && !v1) {
                          return Text_Smolder_HTML_Attributes.className("hexIn hover");
                      };
                      if (v1) {
                          return Text_Smolder_HTML_Attributes.className("hexIn grid");
                      };
                      throw new Error("Failed pattern match at Calculator.Layout line 54, column 1 - line 77, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              var tokenToHex = function (v) {
                  if (v.title === "") {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(hoverClass(hover)(grid))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup));
                  };
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(hoverClass(hover)(grid))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupM)(Text_Smolder_HTML.img)(Text_Smolder_HTML_Attributes.src(image(item.title))))(function () {
                      return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text(v.title)))(function () {
                          return Text_Smolder_HTML.p(Text_Smolder_Markup.text(item.details));
                      });
                  }));
              };
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex")))(Text_Smolder_HTML_Attributes.id(item.title))(tokenToHex(item));
          };
      };
  };                                                                                                                                                
  var flow = function (item) {
      var tokenToHex = function (v) {
          if (v.title === "_") {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex"))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.className("hexIn hover"))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text(v.quantity)))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text(v.details)))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("arrow-css right"))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup));
                  });
              })));
          };
          if (v.title === "/") {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex rotate-1"))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.className("hexIn hover"))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text(v.quantity)))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text(v.details)))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("arrow-css right"))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup));
                  });
              })));
          };
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex"))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.className("hexIn hover"))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup)));
      };
      return tokenToHex(item);
  };
  var emptyHex = {
      title: "", 
      details: ""
  };
  var emptyArrow = {
      title: "", 
      quantity: "", 
      details: ""
  };
  var eatedFood = Calculator_Model.foldState(Calculator_Model.Eating.value)(Calculator_Model.Food.value)(Calculator_Model.AllMatterProperty.value);
  var arrayHex = function (v) {
      if (v.value0.current instanceof Calculator_Model.EatingOnly) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Shopped Food", 
              details: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialShoppedFood(v.value0.state)) + " of Shopped Food"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Eating", 
              details: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(eatedFood(v.value0.state)) + " of Food Consumed"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Managed Waste", 
              details: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(managedWaste(v.value0.state)) + " of Managed Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Array.replicate(9)(emptyHex))))))))))));
      };
      if (v.value0.current instanceof Calculator_Model.EatingBinning) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Shopped Food", 
              details: "..."
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Eating", 
              details: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(eatedFood(v.value0.state))
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Binning", 
              details: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Managed Waste", 
              details: "..."
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Array.replicate(9)(emptyHex))))))))))))));
      };
      if (v.value0.current instanceof Calculator_Model.EatingBinningWormComposting) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Wormery", 
              details: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Shopped Food", 
              details: "..."
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Eating", 
              details: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(eatedFood(v.value0.state))
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Binning", 
              details: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "Managed Waste", 
              details: "..."
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Array.replicate(9)(emptyHex))))))))))))))));
      };
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyHex))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyHex))(Data_Array.replicate(9)(emptyHex))))));
  };
  var hexes = function (hover) {
      return function (grid) {
          return function (state) {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.ul)(Text_Smolder_HTML_Attributes.className("hexGrid"))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(hex(hover)(grid))(arrayHex(state)));
          };
      };
  };
  var arrayArrow = function (v) {
      if (v.value0.current instanceof Calculator_Model.EatingOnly) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialShoppedFood(v.value0.state)), 
              details: "of Food"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(managedWaste(v.value0.state)), 
              details: "of Food Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))))));
      };
      if (v.value0.current instanceof Calculator_Model.EatingBinning) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialShoppedFood(v.value0.state)), 
              details: "of Food"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialBinnedFoodWaste(v.value0.state)), 
              details: "of Food Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(managedWaste(v.value0.state)), 
              details: "of Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))))))));
      };
      if (v.value0.current instanceof Calculator_Model.EatingBinningWormComposting) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "/", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialCompostedWaste(v.value0.state)), 
              details: "of Food Waste "
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(5)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialShoppedFood(v.value0.state)), 
              details: "of Food"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(Calculator_Model.subQty(initialBinnedFoodWaste(v.value0.state))(initialCompostedWaste(v.value0.state))), 
              details: "of Food Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(managedWaste(v.value0.state)), 
              details: "of Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))))))))));
      };
      if (v.value0.current instanceof Calculator_Model.EatingBinningWormCompostingGarden) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "/", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialCompostedWaste(v.value0.state)), 
              details: "of Food Waste "
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(5)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(initialShoppedFood(v.value0.state)), 
              details: "of Food"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(Calculator_Model.subQty(initialBinnedFoodWaste(v.value0.state))(initialCompostedWaste(v.value0.state))), 
              details: "of Food Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: Data_Show.show(Calculator_Model.showQuantity(Calculator_Model.showMatter))(managedWaste(v.value0.state)), 
              details: "of Waste"
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(2)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))))))))));
      };
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))));
  };
  var arrows = function (hover) {
      return function (grid) {
          return function (state) {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.ul)(Text_Smolder_HTML_Attributes.className("hexGrid flows"))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(flow)(arrayArrow(state)));
          };
      };
  };
  var $$interface = function (hover) {
      return function (grid) {
          return function (state) {
              return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(arrows(true)(false)(state))(function () {
                  return hexes(hover)(grid)(state);
              });
          };
      };
  };
  exports["interface"] = $$interface;
})(PS["Calculator.Layout"] = PS["Calculator.Layout"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  /* global exports */
  "use strict";      

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;

  exports.keys = Object.keys || _collect(function (k) {
    return function () { return k; };
  });
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["keys"] = $foreign.keys;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = req === undefined ? undefined : req("util");

  exports.traceAny = function (x) {
    return function (k) {
      // node only recurses two levels into an object before printing
      // "[object]" for further objects when using console.log()
      if (util !== undefined) {
        console.log(util.inspect(x, { depth: null, colors: true }));
      } else {
        console.log(x);
      }
      return k({});
    };
  };
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Debug.Trace"];
  var Prelude = PS["Prelude"];
  var Data_Show = PS["Data.Show"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var spy = function (a) {
      return $foreign.traceAny(a)(function (v) {
          return a;
      });
  };
  exports["spy"] = spy;
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cBoolean = createComponent("boolean",
    function(initial) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.checked = initial;
      return input;
    },
    "change",
    function(t, initial) {
      return t.checked;
    }
  );

  exports.cSelect = function(xs) {
    return function(toString) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(toString(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  function padNumber(num) {
    var str = num.toString();
    if (str.length == 1) {
      str = "0" + str;
    }
    return str;
  }
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var applicativeSignal = new Control_Applicative.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["constant"] = $foreign.constant;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Date = PS["Data.Date"];
  var Data_Time = PS["Data.Time"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Color = PS["Color"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Time_Component = PS["Data.Time.Component"];        
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var functorFlare = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Data_Functor.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Data_Functor.Functor(function (f) {
      return function (v) {
          return UI(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(functorFlare)(f))(v));
      };
  });
  var flareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return handler(v1.value1)();
              };
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (ui) {
              return flareWith(controls)(function ($103) {
                  return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(handler)($103));
              })(ui);
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var fieldset = function (label) {
      return function (v) {
          return UI(function __do() {
              var v1 = v();
              return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };                                 
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };
  var select = function (dictFoldable) {
      return function (label) {
          return function (v) {
              return function (toString) {
                  return createUI($foreign.cSelect(Data_Array.fromFoldable(dictFoldable)(v.value1))(toString))(label)(v.value0);
              };
          };
      };
  };
  var $$boolean = createUI($foreign.cBoolean);
  var applyFlare = new Control_Apply.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0), Control_Apply.apply(Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Control_Apply.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Control_Apply.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Control_Applicative.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Control_Applicative.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Control_Applicative.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Control_Applicative.pure(applicativeFlare)(x)));
  });
  exports["boolean"] = $$boolean;
  exports["fieldset"] = fieldset;
  exports["flareWith"] = flareWith;
  exports["numberSlider"] = numberSlider;
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["select"] = select;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_StrMap = PS["Data.StrMap"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_CatList = PS["Data.CatList"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];        
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($20) {
          return Data_StrMap.fromFoldable(Data_CatList.foldableCatList)(Data_Functor.map(Data_CatList.functorCatList)(toTuple)($20));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return new Data_List_Types.Cons(new Element(v.value0, renderAttrs(v.value2), v.value3, renderMarkup(v.value1.value0)), renderMarkup(v.value4));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return new Data_List_Types.Cons(new Element(v.value0, renderAttrs(v.value2), v.value3, Data_List_Types.Nil.value), renderMarkup(v.value4));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return new Data_List_Types.Cons(new Text(v.value0), renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List_Types.Nil.value;
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.Util line 20, column 1 - line 21, column 86: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var escapeMap = Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("&", "&amp;"), new Data_Tuple.Tuple("<", "&lt;"), new Data_Tuple.Tuple(">", "&gt;"), new Data_Tuple.Tuple("\"", "&quot;"), new Data_Tuple.Tuple("'", "&#39;"), new Data_Tuple.Tuple("/", "&#x2F;") ]);
  var escapeChar = function (s) {
      return Data_Maybe.maybe(s)(Control_Category.id(Control_Category.categoryFn))(Data_StrMap.lookup(s)(escapeMap));
  };
  var $$escape = function (s) {
      return Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(escapeChar)(Data_String.split("")(s)));
  };
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + ($$escape(v1) + "\"");
                  })(Data_StrMap.lookup(k)(a1)));
              };
              return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(pair)(Data_StrMap.keys(a1)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value3)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return $$escape(v.value0);
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 36, column 1 - line 44, column 80: " + [ v.constructor.name ]);
  };
  var render = function ($9) {
      return Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($9)));
  };
  exports["render"] = render;
  exports["renderNode"] = renderNode;
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Flare = PS["Flare"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var runFlareHTML = function (controls) {
      return function (target) {
          return function ($0) {
              return Flare.runFlare(controls)(target)(Data_Functor.map(Flare.functorUI)(Text_Smolder_Renderer_String.render)($0));
          };
      };
  };
  exports["runFlareHTML"] = runFlareHTML;
})(PS["Flare.Smolder"] = PS["Flare.Smolder"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var Calculator_Layout = PS["Calculator.Layout"];
  var Calculator_Model = PS["Calculator.Model"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Debug_Trace = PS["Debug.Trace"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Flare = PS["Flare"];
  var Flare_Smolder = PS["Flare.Smolder"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var $$Math = PS["Math"];
  var Signal_Channel = PS["Signal.Channel"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal_Time = PS["Signal.Time"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];        
  var timescaleToString = function (v) {
      if (v instanceof Calculator_Model.Year) {
          return "Year";
      };
      if (v instanceof Calculator_Model.Month) {
          return "Month";
      };
      if (v instanceof Calculator_Model.Day) {
          return "Day";
      };
      throw new Error("Failed pattern match at Main line 119, column 1 - line 120, column 1: " + [ v.constructor.name ]);
  };
  var systemState = function (current) {
      return function (scale) {
          return function (systemParams1) {
              return function (processParams) {
                  return function (state) {
                      return new Calculator_Model.SystemState({
                          scale: scale, 
                          systemParams: systemParams1, 
                          processParams: processParams, 
                          current: current, 
                          state: state
                      });
                  };
              };
          };
      };
  };
  var systemParamsWithConstants = Data_Functor.map(Data_Functor.functorFn)(Calculator_Model.SystemParams.create)(function (v) {
      return {
          houseHoldSize: v, 
          estatePopulation: 200, 
          estateAveragePersonPerHousehold: 2.4, 
          estateFlatsOneBedroom: 70, 
          estateFlatsTwoBedroom: 23, 
          estateFlatsThreeBedroom: 15
      };
  });
  var systemParams = systemParamsWithConstants(0);
  var scaleToString = function (v) {
      if (v instanceof Calculator_Model.PersonScale) {
          return "Person";
      };
      if (v instanceof Calculator_Model.HouseholdScale) {
          return "HouseHold";
      };
      if (v instanceof Calculator_Model.EstateScale) {
          return "Estate";
      };
      throw new Error("Failed pattern match at Main line 115, column 1 - line 116, column 1: " + [ v.constructor.name ]);
  };
  var ratio = function (v) {
      return v.value1.ratio;
  };

  /**
 *  data Action = Food
 *              | Bin
 *              | Compost
 *              | Garden
 *              | FoodGarden
 *              | Reset
 * 
 *  label :: Action -> String
 *  label Food = "Food"
 *  label Bin = "Bin"
 *  label Compost = "Compost"
 *  label Garden = "Garden"
 *  label FoodGarden = "FoodGarden"
 *  label Reset = "Reset"
 *  type State = Array Token
 *  perform :: Action -> State -> State
 *  perform Food = flip snoc { title: "Food" }
 *  perform Bin = flip snoc { title: "Bin" }
 *  perform Compost = flip snoc { title: "Compost" }
 *  perform Garden = flip snoc { title: "Garden" }
 *  perform FoodGarden = flip snoc { title: "Food Garden" }
 *  perform Reset     = const []
 *  TODO: Reuse this traverseable approach to create `optionals` and `booleans` functions
 *  controls = foldp (maybe id perform) [ { title: "Food" } ] $
 *              buttons [Food, Bin, Compost, Garden, FoodGarden, Reset] label
 *  actions = string "Add item:" "Bin" <**> button "Add" (flip const) cons
 *  list = foldp id ["Food"] actions
 */  
  var optionsLabel = function (v) {
      if (v instanceof Calculator_Model.EatingOnly) {
          return "Food";
      };
      if (v instanceof Calculator_Model.EatingBinning) {
          return "Food & Waste";
      };
      if (v instanceof Calculator_Model.EatingBinningWormComposting) {
          return "Wormery";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingGarden) {
          return "Wormery & Garden";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingFoodGarden) {
          return "Wormery & Food Garden";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingGardenWatering) {
          return "Garden Watering ";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingFoodGardenWatering) {
          return "Food Garden Watering ";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingGardenRainwater) {
          return "Rainwater Collection & Garden";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingFoodGardenRainwater) {
          return "Rainwater Collection & Food Garden";
      };
      if (v instanceof Calculator_Model.EatingBinningWormCompostingFoodSharing) {
          return "Food Sharing";
      };
      if (v instanceof Calculator_Model.NotImplemented) {
          return "Not Implemented Yet";
      };
      throw new Error("Failed pattern match at Main line 80, column 1 - line 81, column 1: " + [ v.constructor.name ]);
  };
  var nexusOptions = Flare.select(Data_Foldable.foldableArray)("Options")(new Data_NonEmpty.NonEmpty(Calculator_Model.EatingOnly.value, [ Calculator_Model.EatingBinning.value, Calculator_Model.EatingBinningWormComposting.value, Calculator_Model.EatingBinningWormCompostingGarden.value, Calculator_Model.EatingBinningWormCompostingFoodGarden.value, Calculator_Model.EatingBinningWormCompostingGardenWatering.value, Calculator_Model.EatingBinningWormCompostingFoodGardenWatering.value, Calculator_Model.EatingBinningWormCompostingGardenRainwater.value, Calculator_Model.EatingBinningWormCompostingFoodGardenRainwater.value, Calculator_Model.EatingBinningWormCompostingFoodSharing.value ]))(optionsLabel);
  var mkScale = function (s) {
      return function (t) {
          return {
              scale: s, 
              time: t
          };
      };
  };
  var initState = new Calculator_Model.State([ new Calculator_Model.Entry({
      process: Calculator_Model.Shopping.value, 
      matter: Calculator_Model.Food.value, 
      matterProperty: Calculator_Model.Shopped.value, 
      quantity: new Calculator_Model.Weight(Calculator_Model.Food.value, 585.0)
  }) ]);
  var controllableParam = function (eatedFoodRatio) {
      var $15 = {};
      for (var $16 in Calculator_Model.initProcessParams) {
          if (Calculator_Model.initProcessParams.hasOwnProperty($16)) {
              $15[$16] = Calculator_Model.initProcessParams[$16];
          };
      };
      $15.eatingParam = (function () {
          var $12 = {};
          for (var $13 in Calculator_Model.initProcessParams.eatingParam) {
              if (Calculator_Model.initProcessParams.eatingParam.hasOwnProperty($13)) {
                  $12[$13] = Calculator_Model.initProcessParams.eatingParam[$13];
              };
          };
          $12.eatedFoodRatio = new Calculator_Model.Ratio(Calculator_Model.Food.value, {
              ratio: eatedFoodRatio
          });
          return $12;
      })();
      return $15;
  };

  /**
 *  ui :: forall e e'. UI e (Markup e')
 * 
 */  
  var ui = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(Calculator_Layout["interface"])(Flare["boolean"]("Info")(true)))(Flare["boolean"]("Grid")(false)))(Data_Functor.map(Flare.functorUI)(Data_Functor.map(Data_Functor.functorFn)(Debug_Trace.spy)(Calculator_Model.nexusSystem))(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(systemState)(nexusOptions))(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(mkScale)(Flare.select(Data_Foldable.foldableArray)("Scale")(new Data_NonEmpty.NonEmpty(Calculator_Model.PersonScale.value, [ Calculator_Model.HouseholdScale.value, Calculator_Model.EstateScale.value ]))(scaleToString)))(Flare.select(Data_Foldable.foldableArray)("Time")(new Data_NonEmpty.NonEmpty(Calculator_Model.Year.value, [ Calculator_Model.Month.value, Calculator_Model.Day.value ]))(timescaleToString))))(Control_Applicative.pure(Flare.applicativeUI)(systemParams)))(Flare.fieldset("Eating Parameters")(Data_Functor.map(Flare.functorUI)(controllableParam)(Flare.numberSlider("eatedFoodRatio")(0.0)(1.0)(1.0e-2)(ratio(Calculator_Model.initProcessParams.eatingParam.eatedFoodRatio))))))(Control_Applicative.pure(Flare.applicativeUI)(initState))));

  /**
 * 
 *  ui opt = interface <$> ( boolean "Info" true )
 *                         <*> ( boolean "Grid" false )
 *                         <*> pure opt
 *                         <*> ( nexusSystem  <$> (select "Scale" (PersonScale :| [HouseholdScale, EstateScale]) scaleToString)
 *                                            <*> pure systemParam
 *                                            <*> fieldset ( ( optionsLabel opt ) <> "Parameters" ) ( controllableParam <$> ( numberSlider "eatedFoodRatio" 0.0 1.0 0.01 0.81 ) )
 *                                            <*> pure eatingInitState
 *                                            <*> pure opt )
 * 
 *  ui EatingBinning = interface <$> ( boolean "Info" true )
 *                     <*> ( boolean "Grid" false )
 *                     <*> pure EatingBinning
 *                     <*> ( nexusSystem  <$> (select "Scale" (PersonScale :| [HouseholdScale, EstateScale]) scaleToString)
 *                           <*> pure systemParam
 *                           <*> fieldset "Eating Binning Parameters" ( controllableParam <$> ( numberSlider "eatedFoodRatio" 0.0 1.0 0.01 0.81 ) )
 *                           <*> pure eatingInitState
 *                           <*> pure EatingBinning )
 * 
 *  ui _ = interface <$> ( boolean "Info" true )
 *                   <*> ( boolean "Grid" false )
 *                   <*> ( nexusSystem <$> pure PersonScale
 *                                     <*> pure systemParam
 *                                     <*> pure ( controllableParam 0.0 )
 *                                     <*> pure eatingInitState
 *                                     <*> pure NotImplemented )
 *  inner = runFlareHTML "controls" "output" <<< ui
 *  <> light <$> liftSF (since 1000.0) (button "Switch on" unit unit)
 *  ui = token <$> string_ "Yo"
 *             <*> (color "Color" (hsl 333.0 0.6 0.5))
 *  Below is an example of what I think the applicative interface results in
 *  where test is instantiated twice with both instance being completely independent.
 * 
 *  ui :: forall e e'. UI e (Markup e')
 *  ui = ( interface <$> ( boolean "Info" true )
 *                 <*> ( test )
 *                 <*> ( eatingBinningUI )
 *                 <*> ( optionsTokens <$> options ) )
 *    <> ( text <$>
 *          ( show <$> test ) )
 *    where
 *      test = boolean "Test" false
 * 
 *  main = runFlareWith "select" inner nexusOptions
 */  
  var main = Flare_Smolder.runFlareHTML("controls")("output")(ui);
  exports["controllableParam"] = controllableParam;
  exports["initState"] = initState;
  exports["main"] = main;
  exports["mkScale"] = mkScale;
  exports["nexusOptions"] = nexusOptions;
  exports["optionsLabel"] = optionsLabel;
  exports["ratio"] = ratio;
  exports["scaleToString"] = scaleToString;
  exports["systemParams"] = systemParams;
  exports["systemParamsWithConstants"] = systemParamsWithConstants;
  exports["systemState"] = systemState;
  exports["timescaleToString"] = timescaleToString;
  exports["ui"] = ui;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
