// Generated by psc-bundle 0.10.1
var PS = {};
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Dual = function (x) {
      return x;
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var newtypeDual = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Dual);
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  exports["Dual"] = Dual;
  exports["newtypeDual"] = newtypeDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($11) {
              return v(v1($11));
          };
      };
  });
  var newtypeEndo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Endo);
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  exports["Endo"] = Endo;
  exports["newtypeEndo"] = newtypeEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 126, column 3 - line 126, column 30: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 124, column 3 - line 124, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 122, column 3 - line 122, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  }; 
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($170) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($170)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($171) {
                      return Data_Monoid_Endo.Endo(c($171));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.replicate = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      while (list !== emptyList) {
        result[count++] = list.head;
        list = list.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  exports["NonEmpty"] = NonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var singleton = function (a) {
      return [ a ];
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["replicate"] = $foreign.replicate;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];        
  var AnyWaste = (function () {
      function AnyWaste() {

      };
      AnyWaste.value = new AnyWaste();
      return AnyWaste;
  })();
  var FoodWaste = (function () {
      function FoodWaste() {

      };
      FoodWaste.value = new FoodWaste();
      return FoodWaste;
  })();
  var ManagedWaste = (function () {
      function ManagedWaste() {

      };
      ManagedWaste.value = new ManagedWaste();
      return ManagedWaste;
  })();
  var SystemParam = (function () {
      function SystemParam(value0) {
          this.value0 = value0;
      };
      SystemParam.create = function (value0) {
          return new SystemParam(value0);
      };
      return SystemParam;
  })();
  var Stock = (function () {
      function Stock(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Stock.create = function (value0) {
          return function (value1) {
              return new Stock(value0, value1);
          };
      };
      return Stock;
  })();
  var PersonScale = (function () {
      function PersonScale() {

      };
      PersonScale.value = new PersonScale();
      return PersonScale;
  })();
  var HouseholdScale = (function () {
      function HouseholdScale() {

      };
      HouseholdScale.value = new HouseholdScale();
      return HouseholdScale;
  })();
  var EstateScale = (function () {
      function EstateScale() {

      };
      EstateScale.value = new EstateScale();
      return EstateScale;
  })();
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var Weight = (function () {
      function Weight(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Weight.create = function (value0) {
          return function (value1) {
              return new Weight(value0, value1);
          };
      };
      return Weight;
  })();
  var Volume = (function () {
      function Volume(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Volume.create = function (value0) {
          return function (value1) {
              return new Volume(value0, value1);
          };
      };
      return Volume;
  })();
  var IncompatibleQuantity = (function () {
      function IncompatibleQuantity() {

      };
      IncompatibleQuantity.value = new IncompatibleQuantity();
      return IncompatibleQuantity;
  })();
  var Process = (function () {
      function Process(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Process.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Process(value0, value1, value2);
              };
          };
      };
      return Process;
  })();
  var Eating = (function () {
      function Eating() {

      };
      Eating.value = new Eating();
      return Eating;
  })();
  var EatingBinning = (function () {
      function EatingBinning() {

      };
      EatingBinning.value = new EatingBinning();
      return EatingBinning;
  })();
  var Composting = (function () {
      function Composting() {

      };
      Composting.value = new Composting();
      return Composting;
  })();
  var CompostingGarden = (function () {
      function CompostingGarden() {

      };
      CompostingGarden.value = new CompostingGarden();
      return CompostingGarden;
  })();
  var CompostingFoodGarden = (function () {
      function CompostingFoodGarden() {

      };
      CompostingFoodGarden.value = new CompostingFoodGarden();
      return CompostingFoodGarden;
  })();
  var WateringGarden = (function () {
      function WateringGarden() {

      };
      WateringGarden.value = new WateringGarden();
      return WateringGarden;
  })();
  var RainwaterWateringGarden = (function () {
      function RainwaterWateringGarden() {

      };
      RainwaterWateringGarden.value = new RainwaterWateringGarden();
      return RainwaterWateringGarden;
  })();
  var NotImplemented = (function () {
      function NotImplemented() {

      };
      NotImplemented.value = new NotImplemented();
      return NotImplemented;
  })();
  var NonEdible = (function () {
      function NonEdible() {

      };
      NonEdible.value = new NonEdible();
      return NonEdible;
  })();
  var Shopped = (function () {
      function Shopped() {

      };
      Shopped.value = new Shopped();
      return Shopped;
  })();
  var EFood = (function () {
      function EFood() {

      };
      EFood.value = new EFood();
      return EFood;
  })();
  var EWaste = (function () {
      function EWaste() {

      };
      EWaste.value = new EWaste();
      return EWaste;
  })();
  var AnyFood = (function () {
      function AnyFood() {

      };
      AnyFood.value = new AnyFood();
      return AnyFood;
  })();
  var ShoppedFood = (function () {
      function ShoppedFood() {

      };
      ShoppedFood.value = new ShoppedFood();
      return ShoppedFood;
  })();
  var CookedFood = (function () {
      function CookedFood() {

      };
      CookedFood.value = new CookedFood();
      return CookedFood;
  })();
  var SharedFood = (function () {
      function SharedFood() {

      };
      SharedFood.value = new SharedFood();
      return SharedFood;
  })();
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var SystemState = (function () {
      function SystemState(value0) {
          this.value0 = value0;
      };
      SystemState.create = function (value0) {
          return new SystemState(value0);
      };
      return SystemState;
  })();
  var Flow = (function () {
      function Flow(value0) {
          this.value0 = value0;
      };
      Flow.create = function (value0) {
          return new Flow(value0);
      };
      return Flow;
  })();
  var EShopping = (function () {
      function EShopping() {

      };
      EShopping.value = new EShopping();
      return EShopping;
  })();
  var EEating = (function () {
      function EEating() {

      };
      EEating.value = new EEating();
      return EEating;
  })();
  var Entry = (function () {
      function Entry(value0) {
          this.value0 = value0;
      };
      Entry.create = function (value0) {
          return new Entry(value0);
      };
      return Entry;
  })();
  var EState = (function () {
      function EState(value0) {
          this.value0 = value0;
      };
      EState.create = function (value0) {
          return new EState(value0);
      };
      return EState;
  })();
  var eatingParam = {
      title: "Eating", 
      eatedFoodRatio: new Ratio(AnyFood.value, {
          ratio: 0.81
      }), 
      allFoodWasteProcess: new Process(AnyFood.value, AnyWaste.value, {
          ratio: 0.19
      }), 
      edibleWasteRatio: new Ratio(AnyWaste.value, {
          ratio: 0.114
      }), 
      nonedibleFoodWasteRatio: new Ratio(AnyWaste.value, {
          ratio: 7.6e-2
      })
  };
  var binningParam = {
      title: "Binning", 
      inputRatio: new Ratio(AnyWaste.value, {
          ratio: 1.0
      }), 
      allFoodWasteProcess: new Process(AnyFood.value, AnyWaste.value, {
          ratio: 0.19
      })
  };
  var flowParams = {
      eatingParam: eatingParam, 
      binningParam: binningParam
  };
  var applyRatio = function (v) {
      var updateQty = function (v1) {
          if (v1.value0 instanceof Weight && v1.value1 instanceof Weight) {
              return new Stock(new Weight(v.value0, v1.value0.value1 - v1.value0.value1 * v.value1.ratio), new Weight(v.value0, v1.value1.value1 + v1.value0.value1 * v.value1.ratio));
          };
          if (v1.value0 instanceof Volume && v1.value1 instanceof Volume) {
              return new Stock(new Volume(v.value0, v1.value0.value1 - v1.value0.value1 * v.value1.ratio), new Volume(v.value0, v1.value1.value1 + v1.value0.value1 * v.value1.ratio));
          };
          return new Stock(IncompatibleQuantity.value, IncompatibleQuantity.value);
      };
      return updateQty;
  };
  var eating = function (v) {
      return function (v1) {
          return new State((function () {
              var $365 = {};
              for (var $366 in v1.value0) {
                  if (v1.value0.hasOwnProperty($366)) {
                      $365[$366] = v1.value0[$366];
                  };
              };
              $365.shoppedFood = applyRatio(v.eatedFoodRatio)(v1.value0.shoppedFood);
              $365.binnedFoodWaste = new Stock(new Weight(AnyWaste.value, 68.0), new Weight(AnyWaste.value, 2.0));
              return $365;
          })());
      };
  };
  var applyProcess = function (v) {
      var updateQty = function (v1) {
          if (v1.value0 instanceof Weight && v1.value1 instanceof Weight) {
              return new Stock(new Weight(v.value1, v1.value0.value1 - v1.value0.value1 * v.value2.ratio), new Weight(v.value1, v1.value1.value1 + v1.value0.value1 * v.value2.ratio));
          };
          if (v1.value0 instanceof Volume && v1.value1 instanceof Volume) {
              return new Stock(new Volume(v.value1, v1.value0.value1 - v1.value0.value1 * v.value2.ratio), new Volume(v.value1, v1.value1.value1 + v1.value0.value1 * v.value2.ratio));
          };
          return new Stock(IncompatibleQuantity.value, IncompatibleQuantity.value);
      };
      return updateQty;
  };
  var binning = function (v) {
      return function (v1) {
          return new State((function () {
              var $393 = {};
              for (var $394 in v1.value0) {
                  if (v1.value0.hasOwnProperty($394)) {
                      $393[$394] = v1.value0[$394];
                  };
              };
              $393.binnedFoodWaste = applyProcess(v.allFoodWasteProcess)(v1.value0.shoppedFood);
              return $393;
          })());
      };
  };
  var nexusSystem = function (scale) {
      return function (systemP) {
          return function (v) {
              return function (v1) {
                  if (v1.value0.value0 instanceof Eating) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      return SystemState.create(new Data_Tuple.Tuple(Eating.value, eatingOutput));
                  };
                  if (v1.value0.value0 instanceof EatingBinning) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      var binningOutput = binning(v.binningParam)(eatingOutput);
                      return SystemState.create(new Data_Tuple.Tuple(EatingBinning.value, binningOutput));
                  };
                  if (v1.value0.value0 instanceof Composting) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      return SystemState.create(new Data_Tuple.Tuple(Composting.value, eatingOutput));
                  };
                  if (v1.value0.value0 instanceof CompostingGarden) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      return SystemState.create(new Data_Tuple.Tuple(CompostingGarden.value, eatingOutput));
                  };
                  if (v1.value0.value0 instanceof CompostingFoodGarden) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      return SystemState.create(new Data_Tuple.Tuple(CompostingFoodGarden.value, eatingOutput));
                  };
                  if (v1.value0.value0 instanceof WateringGarden) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      return SystemState.create(new Data_Tuple.Tuple(WateringGarden.value, eatingOutput));
                  };
                  if (v1.value0.value0 instanceof RainwaterWateringGarden) {
                      var eatingOutput = eating(v.eatingParam)(v1.value0.value1);
                      return SystemState.create(new Data_Tuple.Tuple(RainwaterWateringGarden.value, eatingOutput));
                  };
                  if (v1.value0.value0 instanceof NotImplemented) {
                      return SystemState.create(Data_Tuple.Tuple.create(NotImplemented.value)(new State({
                          shoppedFood: new Stock(new Weight(ShoppedFood.value, 0.0), new Weight(ShoppedFood.value, 0.0)), 
                          cookedFood: new Stock(new Weight(CookedFood.value, 0.0), new Weight(CookedFood.value, 0.0)), 
                          binnedFoodWaste: new Stock(new Weight(FoodWaste.value, 0.0), new Weight(FoodWaste.value, 0.0)), 
                          managedWaste: new Stock(new Weight(ManagedWaste.value, 0.0), new Weight(ManagedWaste.value, 0.0)), 
                          sharedFood: new Stock(new Weight(SharedFood.value, 0.0), new Weight(SharedFood.value, 0.0))
                      })));
                  };
                  throw new Error("Failed pattern match at Calculator.Model line 548, column 1 - line 550, column 40: " + [ scale.constructor.name, systemP.constructor.name, v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  exports["EShopping"] = EShopping;
  exports["EEating"] = EEating;
  exports["EState"] = EState;
  exports["Entry"] = Entry;
  exports["Flow"] = Flow;
  exports["AnyFood"] = AnyFood;
  exports["ShoppedFood"] = ShoppedFood;
  exports["CookedFood"] = CookedFood;
  exports["SharedFood"] = SharedFood;
  exports["EFood"] = EFood;
  exports["EWaste"] = EWaste;
  exports["NonEdible"] = NonEdible;
  exports["Shopped"] = Shopped;
  exports["Eating"] = Eating;
  exports["EatingBinning"] = EatingBinning;
  exports["Composting"] = Composting;
  exports["CompostingGarden"] = CompostingGarden;
  exports["CompostingFoodGarden"] = CompostingFoodGarden;
  exports["WateringGarden"] = WateringGarden;
  exports["RainwaterWateringGarden"] = RainwaterWateringGarden;
  exports["NotImplemented"] = NotImplemented;
  exports["Process"] = Process;
  exports["Weight"] = Weight;
  exports["Volume"] = Volume;
  exports["IncompatibleQuantity"] = IncompatibleQuantity;
  exports["Ratio"] = Ratio;
  exports["PersonScale"] = PersonScale;
  exports["HouseholdScale"] = HouseholdScale;
  exports["EstateScale"] = EstateScale;
  exports["State"] = State;
  exports["Stock"] = Stock;
  exports["SystemParam"] = SystemParam;
  exports["SystemState"] = SystemState;
  exports["AnyWaste"] = AnyWaste;
  exports["FoodWaste"] = FoodWaste;
  exports["ManagedWaste"] = ManagedWaste;
  exports["flowParams"] = flowParams;
  exports["nexusSystem"] = nexusSystem;
})(PS["Calculator.Model"] = PS["Calculator.Model"] || {});
(function(exports) {
    "use strict";

  exports.ceil = Math.ceil;

  exports.floor = Math.floor;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Math"];
  exports["trunc"] = $foreign.trunc;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 352, column 1 - line 355, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $33 = Data_CatQueue.uncons(xs);
                          if ($33 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($33 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List_Types.Cons(k($33.value0.value0), ys);
                              xs = $33.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ $33.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $38 = Data_CatQueue["null"](v.value1);
              if ($38) {
                  return CatNil.value;
              };
              if (!$38) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 103, column 39 - line 103, column 89: " + [ $38.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  };
  var foldMap = function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof CatNil) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof CatCons) {
                  var d = (function () {
                      var $43 = Data_CatQueue["null"](v.value1);
                      if ($43) {
                          return CatNil.value;
                      };
                      if (!$43) {
                          return foldr(link)(CatNil.value)(v.value1);
                      };
                      throw new Error("Failed pattern match at Data.CatList line 144, column 11 - line 144, column 61: " + [ $43.constructor.name ]);
                  })();
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(foldMap(dictMonoid)(f)(d));
              };
              throw new Error("Failed pattern match at Data.CatList line 142, column 1 - line 142, column 26: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return foldMap(dictMonoid)(f)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldlDefault(foldableCatList)(f)(s)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var map = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $50 = Data_CatQueue["null"](v1.value1);
                  if ($50) {
                      return CatNil.value;
                  };
                  if (!$50) {
                      return foldr(link)(CatNil.value)(v1.value1);
                  };
                  throw new Error("Failed pattern match at Data.CatList line 138, column 11 - line 138, column 61: " + [ $50.constructor.name ]);
              })();
              return cons(v(v1.value0))(map(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 136, column 1 - line 136, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var functorCatList = new Data_Functor.Functor(map);
  var singleton = function (a) {
      return cons(a)(CatNil.value);
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var monadCatList = new Control_Monad.Monad(function () {
      return applicativeCatList;
  }, function () {
      return bindCatList;
  });
  var bindCatList = new Control_Bind.Bind(function () {
      return applyCatList;
  }, Data_Function.flip(foldMap(monoidCatList)));
  var applyCatList = new Control_Apply.Apply(function () {
      return functorCatList;
  }, Control_Monad.ap(monadCatList));
  var applicativeCatList = new Control_Applicative.Applicative(function () {
      return applyCatList;
  }, singleton);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
  exports["applyCatList"] = applyCatList;
  exports["applicativeCatList"] = applicativeCatList;
  exports["bindCatList"] = bindCatList;
  exports["monadCatList"] = monadCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Element(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var text = function (s) {
      return new Content(s, new Return(Data_Unit.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
      };
  };                                                                
  var leaf = function (el) {
      return new Element(el, Data_Maybe.Nothing.value, Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
  };
  var functorMarkupM = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Data_Functor.map(functorMarkupM)(f)(v.value4));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Data_Functor.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 55, column 3 - line 55, column 88: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute(Control_Applicative.pure(Data_CatList.applicativeCatList)(new Attr(key, value)));
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value2)(v1.value0), v.value3, v.value4);
          };
          return v;
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Control_Monad.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Control_Bind.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Control_Bind.bind(bindMarkupM)(v.value4)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Control_Bind.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 66, column 3 - line 66, column 90: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Control_Apply.Apply(function () {
      return functorMarkupM;
  }, Control_Monad.ap(monadMarkupM));
  var applicativeMarkupM = new Control_Applicative.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Data_Semigroup.Semigroup(function (x) {
      return function (y) {
          return Control_Apply.applySecond(applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Data_Unit.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["attribute"] = attribute;
  exports["leaf"] = leaf;
  exports["parent"] = parent;
  exports["text"] = text;
  exports["with"] = $$with;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var ul = Text_Smolder_Markup.parent("ul");    
  var p = Text_Smolder_Markup.parent("p");    
  var li = Text_Smolder_Markup.parent("li");    
  var img = Text_Smolder_Markup.leaf("img");
  var h2 = Text_Smolder_Markup.parent("h2");
  var div = Text_Smolder_Markup.parent("div");  
  var a = Text_Smolder_Markup.parent("a");
  exports["a"] = a;
  exports["div"] = div;
  exports["h2"] = h2;
  exports["img"] = img;
  exports["li"] = li;
  exports["p"] = p;
  exports["ul"] = ul;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"]; 
  var src = Text_Smolder_Markup.attribute("src");    
  var id = Text_Smolder_Markup.attribute("id");    
  var className = Text_Smolder_Markup.attribute("class");
  exports["className"] = className;
  exports["id"] = id;
  exports["src"] = src;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Calculator_Model = PS["Calculator.Model"];
  var $$Math = PS["Math"];
  var CSS = PS["CSS"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var CSS_Render = PS["CSS.Render"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Show = PS["Data.Show"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var CSS_Elements = PS["CSS.Elements"];
  var CSS_Font = PS["CSS.Font"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var CSS_String = PS["CSS.String"];
  var CSS_Selector = PS["CSS.Selector"];
  var CSS_Display = PS["CSS.Display"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var optionsTokens = function (v) {
      if (v instanceof Calculator_Model.Eating) {
          return [ {
              title: "Eating"
          } ];
      };
      if (v instanceof Calculator_Model.EatingBinning) {
          return [ {
              title: "Eating"
          }, {
              title: "Binning"
          } ];
      };
      if (v instanceof Calculator_Model.Composting) {
          return [ {
              title: "Eating"
          }, {
              title: "Binning"
          }, {
              title: "Composting"
          } ];
      };
      if (v instanceof Calculator_Model.CompostingGarden) {
          return [ {
              title: "Eating"
          }, {
              title: "Binning"
          }, {
              title: "Composting"
          }, {
              title: "Garden"
          } ];
      };
      if (v instanceof Calculator_Model.CompostingFoodGarden) {
          return [ {
              title: "Eating"
          }, {
              title: "Binning"
          }, {
              title: "Composting"
          }, {
              title: "Food Garden"
          } ];
      };
      if (v instanceof Calculator_Model.WateringGarden) {
          return [ {
              title: "Garden"
          } ];
      };
      if (v instanceof Calculator_Model.RainwaterWateringGarden) {
          return [ {
              title: "Collecting"
          }, {
              title: "Garden"
          } ];
      };
      if (v instanceof Calculator_Model.NotImplemented) {
          return [ {
              title: "NotImplemented"
          } ];
      };
      throw new Error("Failed pattern match at Calculator.Layout line 186, column 1 - line 186, column 48: " + [ v.constructor.name ]);
  };
  var hex = function (hover) {
      return function (grid) {
          return function (item) {
              var image = function (v) {
                  if (v === "Eating") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Binning") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Compost") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Garden") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Food Garden") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "Shopped Food") {
                      return "https://farm5.staticflickr.com/4144/5053682635_b348b24698.jpg";
                  };
                  if (v === "_") {
                      return "https://dummyimage.com/200x200&text=+";
                  };
                  return "";
              };
              var hoverClass = function (v) {
                  return function (v1) {
                      if (!v && !v1) {
                          return Text_Smolder_HTML_Attributes.className("hexIn");
                      };
                      if (v && !v1) {
                          return Text_Smolder_HTML_Attributes.className("hexIn hover");
                      };
                      if (v1) {
                          return Text_Smolder_HTML_Attributes.className("hexIn grid");
                      };
                      throw new Error("Failed pattern match at Calculator.Layout line 47, column 1 - line 69, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              var tokenToHex = function (v) {
                  if (v.title === "") {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(hoverClass(hover)(grid))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup));
                  };
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(hoverClass(hover)(grid))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupM)(Text_Smolder_HTML.img)(Text_Smolder_HTML_Attributes.src(image(item.title))))(function () {
                      return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text(v.title)))(function () {
                          return Text_Smolder_HTML.p(Text_Smolder_Markup.text("Details"));
                      });
                  }));
              };
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex")))(Text_Smolder_HTML_Attributes.id(item.title))(tokenToHex(item));
          };
      };
  };
  var flow = function (item) {
      var tokenToHex = function (v) {
          if (v.title === "_") {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex"))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.className("hexIn hover"))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text(Data_Show.show(Data_Show.showNumber)(v.quantity))))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text("")))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("arrow-css right"))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup));
                  });
              })));
          };
          if (v.title === "/") {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex rotate-1"))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.className("hexIn hover"))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text(Data_Show.show(Data_Show.showNumber)(v.quantity))))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text("")))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("arrow-css right"))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup));
                  });
              })));
          };
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.li)(Text_Smolder_HTML_Attributes.className("hex"))(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.className("hexIn hover"))(Data_Monoid.mempty(Text_Smolder_Markup.monoidMarkup)));
      };
      return tokenToHex(item);
  };                           
  var emptyArrow = {
      title: "", 
      quantity: 0.0
  };
  var displayState = function (title) {
      return function (available) {
          return function (consumed) {
              var showConsumed = function (v) {
                  if (v instanceof Calculator_Model.Weight) {
                      return "Consumed : " + (Data_Show.show(Data_Show.showNumber)($$Math.trunc(v.value1)) + "kg");
                  };
                  if (v instanceof Calculator_Model.Volume) {
                      return "Consumed : " + (Data_Show.show(Data_Show.showNumber)($$Math.trunc(v.value1)) + "L");
                  };
                  if (v instanceof Calculator_Model.IncompatibleQuantity) {
                      return "Incompatible Quantity";
                  };
                  throw new Error("Failed pattern match at Calculator.Layout line 205, column 7 - line 206, column 7: " + [ v.constructor.name ]);
              };
              var showAvailable = function (v) {
                  if (v instanceof Calculator_Model.Weight) {
                      return "Available : " + (Data_Show.show(Data_Show.showNumber)($$Math.trunc(v.value1)) + "kg");
                  };
                  if (v instanceof Calculator_Model.Volume) {
                      return "Available : " + (Data_Show.show(Data_Show.showNumber)($$Math.trunc(v.value1)) + "L");
                  };
                  if (v instanceof Calculator_Model.IncompatibleQuantity) {
                      return "Incompatible Quantity";
                  };
                  throw new Error("Failed pattern match at Calculator.Layout line 198, column 1 - line 213, column 1: " + [ v.constructor.name ]);
              };
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("center"))(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text(title))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("center"))(Text_Smolder_Markup.text(showAvailable(available))))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("center"))(Text_Smolder_Markup.text(showConsumed(consumed)));
                  });
              }));
          };
      };
  };                                                                  
  var arrayHex = function (v) {
      if (v.length === 1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[0]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Array.replicate(9)({
              title: ""
          }))))))));
      };
      if (v.length === 2) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[0]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[1]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Array.replicate(9)({
              title: ""
          }))))))))));
      };
      if (v.length === 3) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[2]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[0]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[1]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Array.replicate(9)({
              title: ""
          }))))))))))));
      };
      if (v.length === 4) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[2]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[0]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(1)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[1]))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)({
              title: ""
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(v[3]))(Data_Array.replicate(4)({
              title: ""
          }))))))))))))));
      };
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
          title: ""
      }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)({
          title: ""
      }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
          title: ""
      }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)({
          title: ""
      }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)({
          title: ""
      }))(Data_Array.replicate(9)({
          title: ""
      }))))));
  };
  var hexes = function (hover) {
      return function (grid) {
          return function (arr) {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.ul)(Text_Smolder_HTML_Attributes.className("hexGrid"))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(hex(hover)(grid))(arrayHex(arr)));
          };
      };
  };
  var arrayArrow = function (v) {
      if (v.length === 1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: 2.0
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: 2.0
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(3)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))))));
      };
      if (v.length === 2) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: 2.0
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))));
      };
      if (v.length === 3) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "/", 
              quantity: 2.0
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(5)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.singleton({
              title: "_", 
              quantity: 2.0
          }))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))))))));
      };
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(9)(emptyArrow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(10)(emptyArrow))(Data_Array.replicate(9)(emptyArrow))))));
  };
  var arrows = function (hover) {
      return function (grid) {
          return function (arr) {
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.ul)(Text_Smolder_HTML_Attributes.className("hexGrid flows"))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Text_Smolder_Markup.monoidMarkup)(flow)(arrayArrow(arr)));
          };
      };
  };
  var $$interface = function (hover) {
      return function (grid) {
          return function (v) {
              return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(displayState("Food: ")(v.value0.value1.value0.shoppedFood.value0)(v.value0.value1.value0.shoppedFood.value1))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(displayState("FoodWaste: ")(v.value0.value1.value0.binnedFoodWaste.value0)(v.value0.value1.value0.binnedFoodWaste.value1))(function () {
                      return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(arrows(true)(false)(optionsTokens(v.value0.value0)))(function () {
                          return hexes(hover)(grid)(optionsTokens(v.value0.value0));
                      });
                  });
              });
          };
      };
  };
  exports["interface"] = $$interface;
})(PS["Calculator.Layout"] = PS["Calculator.Layout"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  /* global exports */
  "use strict";      

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;

  exports.keys = Object.keys || _collect(function (k) {
    return function () { return k; };
  });
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["lookup"] = lookup;
  exports["pureST"] = pureST;
  exports["keys"] = $foreign.keys;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["joinWith"] = $foreign.joinWith;
  exports["split"] = $foreign.split;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cBoolean = createComponent("boolean",
    function(initial) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.checked = initial;
      return input;
    },
    "change",
    function(t, initial) {
      return t.checked;
    }
  );

  exports.cSelect = function(xs) {
    return function(toString) {
      return createComponent("select",
        function(initial) {
          var select = document.createElement("select");

          var x, op;
          for (var i = 0; i < xs.length + 1; i++) {
            x = (i === 0) ? initial : xs[i - 1];
            op = document.createElement("option");
            op.appendChild(document.createTextNode(toString(x)));
            select.appendChild(op);
          }

          return select;
        },
        "change",
        function(t, initial) {
          var ix = t.selectedIndex;
          if (ix === 0) {
            return initial;
          }
          return xs[ix - 1];
        }
      );
    };
  };

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  function padNumber(num) {
    var str = num.toString();
    if (str.length == 1) {
      str = "0" + str;
    }
    return str;
  }
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var applicativeSignal = new Control_Applicative.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["constant"] = $foreign.constant;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Date = PS["Data.Date"];
  var Data_Time = PS["Data.Time"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Color = PS["Color"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Time_Component = PS["Data.Time.Component"];        
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };
  var functorFlare = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Data_Functor.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Data_Functor.Functor(function (f) {
      return function (v) {
          return UI(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Functor.map(functorFlare)(f))(v));
      };
  });
  var flareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return handler(v1.value1)();
              };
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (ui) {
              return flareWith(controls)(function ($103) {
                  return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(handler)($103));
              })(ui);
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var fieldset = function (label) {
      return function (v) {
          return UI(function __do() {
              var v1 = v();
              return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };                                 
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };
  var select = function (dictFoldable) {
      return function (label) {
          return function (v) {
              return function (toString) {
                  return createUI($foreign.cSelect(Data_Array.fromFoldable(dictFoldable)(v.value1))(toString))(label)(v.value0);
              };
          };
      };
  };
  var $$boolean = createUI($foreign.cBoolean);
  var applyFlare = new Control_Apply.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0), Control_Apply.apply(Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Control_Apply.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Control_Apply.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Control_Applicative.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Control_Applicative.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Control_Applicative.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Control_Applicative.pure(applicativeFlare)(x)));
  });
  exports["boolean"] = $$boolean;
  exports["fieldset"] = fieldset;
  exports["flareWith"] = flareWith;
  exports["numberSlider"] = numberSlider;
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["select"] = select;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_StrMap = PS["Data.StrMap"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_CatList = PS["Data.CatList"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];        
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($20) {
          return Data_StrMap.fromFoldable(Data_CatList.foldableCatList)(Data_Functor.map(Data_CatList.functorCatList)(toTuple)($20));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return new Data_List_Types.Cons(new Element(v.value0, renderAttrs(v.value2), v.value3, renderMarkup(v.value1.value0)), renderMarkup(v.value4));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return new Data_List_Types.Cons(new Element(v.value0, renderAttrs(v.value2), v.value3, Data_List_Types.Nil.value), renderMarkup(v.value4));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return new Data_List_Types.Cons(new Text(v.value0), renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List_Types.Nil.value;
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.Util line 20, column 1 - line 21, column 86: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var escapeMap = Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("&", "&amp;"), new Data_Tuple.Tuple("<", "&lt;"), new Data_Tuple.Tuple(">", "&gt;"), new Data_Tuple.Tuple("\"", "&quot;"), new Data_Tuple.Tuple("'", "&#39;"), new Data_Tuple.Tuple("/", "&#x2F;") ]);
  var escapeChar = function (s) {
      return Data_Maybe.maybe(s)(Control_Category.id(Control_Category.categoryFn))(Data_StrMap.lookup(s)(escapeMap));
  };
  var $$escape = function (s) {
      return Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(escapeChar)(Data_String.split("")(s)));
  };
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + ($$escape(v1) + "\"");
                  })(Data_StrMap.lookup(k)(a1)));
              };
              return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(pair)(Data_StrMap.keys(a1)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value3)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return $$escape(v.value0);
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 36, column 1 - line 44, column 80: " + [ v.constructor.name ]);
  };
  var render = function ($9) {
      return Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_Functor.map(Data_List_Types.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($9)));
  };
  exports["render"] = render;
  exports["renderNode"] = renderNode;
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Flare = PS["Flare"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var runFlareHTML = function (controls) {
      return function (target) {
          return function ($0) {
              return Flare.runFlare(controls)(target)(Data_Functor.map(Flare.functorUI)(Text_Smolder_Renderer_String.render)($0));
          };
      };
  };
  exports["runFlareHTML"] = runFlareHTML;
})(PS["Flare.Smolder"] = PS["Flare.Smolder"] || {});
(function(exports) {
    "use strict";
  var Prelude = PS["Prelude"];
  var Calculator_Layout = PS["Calculator.Layout"];
  var Calculator_Model = PS["Calculator.Model"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Flare = PS["Flare"];
  var Flare_Smolder = PS["Flare.Smolder"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var $$Math = PS["Math"];
  var Signal_Channel = PS["Signal.Channel"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal_Time = PS["Signal.Time"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];        
  var Food = (function () {
      function Food() {

      };
      Food.value = new Food();
      return Food;
  })();
  var Bin = (function () {
      function Bin() {

      };
      Bin.value = new Bin();
      return Bin;
  })();
  var Compost = (function () {
      function Compost() {

      };
      Compost.value = new Compost();
      return Compost;
  })();
  var Garden = (function () {
      function Garden() {

      };
      Garden.value = new Garden();
      return Garden;
  })();
  var FoodGarden = (function () {
      function FoodGarden() {

      };
      FoodGarden.value = new FoodGarden();
      return FoodGarden;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var systemState = function (opt) {
      return function (state) {
          return new Calculator_Model.SystemState(new Data_Tuple.Tuple(opt, state));
      };
  };
  var systemParamWithConstants = Data_Functor.map(Data_Functor.functorFn)(Calculator_Model.SystemParam.create)(function (v) {
      return {
          houseHoldSize: v, 
          estatePopulation: 200, 
          estateFlatsOneBedroom: 70, 
          estateFlatsTwoBedroom: 23, 
          estateFlatsThreeBedroom: 15
      };
  });
  var systemParam = systemParamWithConstants(0);
  var scaleToString = function (v) {
      if (v instanceof Calculator_Model.PersonScale) {
          return "Person";
      };
      if (v instanceof Calculator_Model.HouseholdScale) {
          return "HouseHold";
      };
      if (v instanceof Calculator_Model.EstateScale) {
          return "Estate";
      };
      throw new Error("Failed pattern match at Main line 106, column 1 - line 107, column 1: " + [ v.constructor.name ]);
  };

  /**
 *  type State = Array Token
 *  perform :: Action -> State -> State
 *  perform Food = flip snoc { title: "Food" }
 *  perform Bin = flip snoc { title: "Bin" }
 *  perform Compost = flip snoc { title: "Compost" }
 *  perform Garden = flip snoc { title: "Garden" }
 *  perform FoodGarden = flip snoc { title: "Food Garden" }
 *  perform Reset     = const []
 *  TODO: Reuse this traverseable approach to create `optionals` and `booleans` functions
 *  controls = foldp (maybe id perform) [ { title: "Food" } ] $
 *              buttons [Food, Bin, Compost, Garden, FoodGarden, Reset] label
 *  actions = string "Add item:" "Bin" <**> button "Add" (flip const) cons
 *  list = foldp id ["Food"] actions
 */  
  var optionsLabel = function (v) {
      if (v instanceof Calculator_Model.Eating) {
          return "Food";
      };
      if (v instanceof Calculator_Model.EatingBinning) {
          return "Food & Waste";
      };
      if (v instanceof Calculator_Model.Composting) {
          return "Composting";
      };
      if (v instanceof Calculator_Model.CompostingGarden) {
          return "Composting & Garden";
      };
      if (v instanceof Calculator_Model.CompostingFoodGarden) {
          return "Composting & Food Garden";
      };
      if (v instanceof Calculator_Model.WateringGarden) {
          return "Watering Garden";
      };
      if (v instanceof Calculator_Model.RainwaterWateringGarden) {
          return "Rainwater Collection & Garden";
      };
      if (v instanceof Calculator_Model.NotImplemented) {
          return "Not Implemented Yet";
      };
      throw new Error("Failed pattern match at Main line 63, column 1 - line 64, column 1: " + [ v.constructor.name ]);
  };
  var nexusOptions = Flare.select(Data_Foldable.foldableArray)("Options")(new Data_NonEmpty.NonEmpty(Calculator_Model.Eating.value, [ Calculator_Model.EatingBinning.value, Calculator_Model.Composting.value, Calculator_Model.CompostingGarden.value, Calculator_Model.CompostingFoodGarden.value, Calculator_Model.WateringGarden.value, Calculator_Model.RainwaterWateringGarden.value ]))(optionsLabel);
  var label = function (v) {
      if (v instanceof Food) {
          return "Food";
      };
      if (v instanceof Bin) {
          return "Bin";
      };
      if (v instanceof Compost) {
          return "Compost";
      };
      if (v instanceof Garden) {
          return "Garden";
      };
      if (v instanceof FoodGarden) {
          return "FoodGarden";
      };
      if (v instanceof Reset) {
          return "Reset";
      };
      throw new Error("Failed pattern match at Main line 39, column 1 - line 40, column 1: " + [ v.constructor.name ]);
  };
  var initEState = new Calculator_Model.EState([ new Calculator_Model.Entry({
      process: Calculator_Model.EShopping.value, 
      matter: Calculator_Model.EFood.value, 
      matterProperty: Calculator_Model.Shopped.value, 
      quantity: new Calculator_Model.Weight(Calculator_Model.EFood.value, 120.0)
  }), new Calculator_Model.Entry({
      process: Calculator_Model.EShopping.value, 
      matter: Calculator_Model.EFood.value, 
      matterProperty: Calculator_Model.Shopped.value, 
      quantity: new Calculator_Model.Weight(Calculator_Model.EFood.value, -20.0)
  }), new Calculator_Model.Entry({
      process: Calculator_Model.EEating.value, 
      matter: Calculator_Model.EWaste.value, 
      matterProperty: Calculator_Model.NonEdible.value, 
      quantity: new Calculator_Model.Weight(Calculator_Model.EWaste.value, 10.0)
  }) ]);
  var eatingParam = {
      title: "Eating", 
      eatedFoodRatio: new Calculator_Model.Ratio(Calculator_Model.AnyFood.value, {
          ratio: 0.81
      }), 
      allFoodWasteProcess: new Calculator_Model.Process(Calculator_Model.AnyFood.value, Calculator_Model.AnyWaste.value, {
          ratio: 0.19
      }), 
      edibleWasteRatio: new Calculator_Model.Ratio(Calculator_Model.AnyWaste.value, {
          ratio: 0.114
      }), 
      nonedibleFoodWasteRatio: new Calculator_Model.Ratio(Calculator_Model.AnyWaste.value, {
          ratio: 7.6e-2
      })
  };
  var eatingInitState = new Calculator_Model.State({
      shoppedFood: new Calculator_Model.Stock(new Calculator_Model.Weight(Calculator_Model.ShoppedFood.value, 585.0), new Calculator_Model.Weight(Calculator_Model.ShoppedFood.value, 0.0)), 
      binnedFoodWaste: new Calculator_Model.Stock(new Calculator_Model.Weight(Calculator_Model.FoodWaste.value, 0.0), new Calculator_Model.Weight(Calculator_Model.FoodWaste.value, 0.0)), 
      managedWaste: new Calculator_Model.Stock(new Calculator_Model.Weight(Calculator_Model.ManagedWaste.value, 0.0), new Calculator_Model.Weight(Calculator_Model.ManagedWaste.value, 0.0)), 
      sharedFood: new Calculator_Model.Stock(new Calculator_Model.Weight(Calculator_Model.SharedFood.value, 0.0), new Calculator_Model.Weight(Calculator_Model.SharedFood.value, 0.0)), 
      cookedFood: new Calculator_Model.Stock(new Calculator_Model.Weight(Calculator_Model.SharedFood.value, 0.0), new Calculator_Model.Weight(Calculator_Model.SharedFood.value, 0.0))
  });
  var eatingBinningInput = new Calculator_Model.Flow({
      input: 0, 
      output: 0, 
      stock: 0
  });
  var controllableParam = function (eatedFoodRatio) {
      var $10 = {};
      for (var $11 in Calculator_Model.flowParams) {
          if (Calculator_Model.flowParams.hasOwnProperty($11)) {
              $10[$11] = Calculator_Model.flowParams[$11];
          };
      };
      $10.eatingParam = (function () {
          var $7 = {};
          for (var $8 in eatingParam) {
              if (eatingParam.hasOwnProperty($8)) {
                  $7[$8] = eatingParam[$8];
              };
          };
          $7.eatedFoodRatio = new Calculator_Model.Ratio(Calculator_Model.AnyFood.value, {
              ratio: eatedFoodRatio
          });
          return $7;
      })();
      return $10;
  };

  /**
 *  ui :: forall e e'. UI e (Markup e')
 * 
 */  
  var ui = Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(Calculator_Layout["interface"])(Flare["boolean"]("Info")(true)))(Flare["boolean"]("Grid")(false)))(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(Calculator_Model.nexusSystem)(Flare.select(Data_Foldable.foldableArray)("Scale")(new Data_NonEmpty.NonEmpty(Calculator_Model.PersonScale.value, [ Calculator_Model.HouseholdScale.value, Calculator_Model.EstateScale.value ]))(scaleToString)))(Control_Applicative.pure(Flare.applicativeUI)(systemParam)))(Flare.fieldset("Eating Parameters")(Data_Functor.map(Flare.functorUI)(controllableParam)(Flare.numberSlider("eatedFoodRatio")(0.0)(1.0)(1.0e-2)(0.81)))))(Control_Apply.apply(Flare.applyUI)(Data_Functor.map(Flare.functorUI)(systemState)(nexusOptions))(Control_Applicative.pure(Flare.applicativeUI)(eatingInitState))));

  /**
 * 
 *  ui opt = interface <$> ( boolean "Info" true )
 *                         <*> ( boolean "Grid" false )
 *                         <*> pure opt
 *                         <*> ( nexusSystem  <$> (select "Scale" (PersonScale :| [HouseholdScale, EstateScale]) scaleToString)
 *                                            <*> pure systemParam
 *                                            <*> fieldset ( ( optionsLabel opt ) <> "Parameters" ) ( controllableParam <$> ( numberSlider "eatedFoodRatio" 0.0 1.0 0.01 0.81 ) )
 *                                            <*> pure eatingInitState
 *                                            <*> pure opt )
 * 
 *  ui EatingBinning = interface <$> ( boolean "Info" true )
 *                     <*> ( boolean "Grid" false )
 *                     <*> pure EatingBinning
 *                     <*> ( nexusSystem  <$> (select "Scale" (PersonScale :| [HouseholdScale, EstateScale]) scaleToString)
 *                           <*> pure systemParam
 *                           <*> fieldset "Eating Binning Parameters" ( controllableParam <$> ( numberSlider "eatedFoodRatio" 0.0 1.0 0.01 0.81 ) )
 *                           <*> pure eatingInitState
 *                           <*> pure EatingBinning )
 * 
 *  ui _ = interface <$> ( boolean "Info" true )
 *                   <*> ( boolean "Grid" false )
 *                   <*> ( nexusSystem <$> pure PersonScale
 *                                     <*> pure systemParam
 *                                     <*> pure ( controllableParam 0.0 )
 *                                     <*> pure eatingInitState
 *                                     <*> pure NotImplemented )
 *  inner = runFlareHTML "controls" "output" <<< ui
 *  <> light <$> liftSF (since 1000.0) (button "Switch on" unit unit)
 *  ui = token <$> string_ "Yo"
 *             <*> (color "Color" (hsl 333.0 0.6 0.5))
 *  Below is an example of what I think the applicative interface results in
 *  where test is instantiated twice with both instance being completely independent.
 * 
 *  ui :: forall e e'. UI e (Markup e')
 *  ui = ( interface <$> ( boolean "Info" true )
 *                 <*> ( test )
 *                 <*> ( eatingBinningUI )
 *                 <*> ( optionsTokens <$> options ) )
 *    <> ( text <$>
 *          ( show <$> test ) )
 *    where
 *      test = boolean "Test" false
 * 
 *  main = runFlareWith "select" inner nexusOptions
 */  
  var main = Flare_Smolder.runFlareHTML("controls")("output")(ui);
  exports["Food"] = Food;
  exports["Bin"] = Bin;
  exports["Compost"] = Compost;
  exports["Garden"] = Garden;
  exports["FoodGarden"] = FoodGarden;
  exports["Reset"] = Reset;
  exports["controllableParam"] = controllableParam;
  exports["eatingBinningInput"] = eatingBinningInput;
  exports["eatingInitState"] = eatingInitState;
  exports["eatingParam"] = eatingParam;
  exports["initEState"] = initEState;
  exports["label"] = label;
  exports["main"] = main;
  exports["nexusOptions"] = nexusOptions;
  exports["optionsLabel"] = optionsLabel;
  exports["scaleToString"] = scaleToString;
  exports["systemParam"] = systemParam;
  exports["systemParamWithConstants"] = systemParamWithConstants;
  exports["systemState"] = systemState;
  exports["ui"] = ui;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
