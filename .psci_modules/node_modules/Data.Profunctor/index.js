"use strict";
var Prelude = require("../Prelude");
var Data_Newtype = require("../Data.Newtype");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Category = require("../Control.Category");

/**
 *  | A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`
 *  | to `Type`.
 *  |
 *  | In other words, a `Profunctor` is a type constructor of two type
 *  | arguments, which is contravariant in its first argument and covariant
 *  | in its second argument.
 *  |
 *  | The `dimap` function can be used to map functions over both arguments
 *  | simultaneously.
 *  |
 *  | A straightforward example of a profunctor is the function arrow `(->)`.
 *  |
 *  | Laws:
 *  |
 *  | - Identity: `dimap id id = id`
 *  | - Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`
 */
var Profunctor = function (dimap) {
    this.dimap = dimap;
};
var profunctorFn = new Profunctor(function (a2b) {
    return function (c2d) {
        return function (b2c) {
            return function ($9) {
                return c2d(b2c(a2b($9)));
            };
        };
    };
});

/**
 *  | A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`
 *  | to `Type`.
 *  |
 *  | In other words, a `Profunctor` is a type constructor of two type
 *  | arguments, which is contravariant in its first argument and covariant
 *  | in its second argument.
 *  |
 *  | The `dimap` function can be used to map functions over both arguments
 *  | simultaneously.
 *  |
 *  | A straightforward example of a profunctor is the function arrow `(->)`.
 *  |
 *  | Laws:
 *  |
 *  | - Identity: `dimap id id = id`
 *  | - Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`
 */
var dimap = function (dict) {
    return dict.dimap;
};

/**
 *  | Map a function over the (contravariant) first type argument only.
 */
var lmap = function (dictProfunctor) {
    return function (a2b) {
        return dimap(dictProfunctor)(a2b)(Control_Category.id(Control_Category.categoryFn));
    };
};

/**
 *  | Map a function over the (covariant) second type argument only.
 */
var rmap = function (dictProfunctor) {
    return function (b2c) {
        return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
    };
};
var unwrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return dimap(dictProfunctor)(Data_Newtype.wrap(dictNewtype))(Data_Newtype.unwrap(dictNewtype));
    };
};
var wrapIso = function (dictProfunctor) {
    return function (dictNewtype) {
        return function (v) {
            return dimap(dictProfunctor)(Data_Newtype.unwrap(dictNewtype))(Data_Newtype.wrap(dictNewtype));
        };
    };
};

/**
 *  | Lift a pure function into any `Profunctor` which is also a `Category`.
 */
var arr = function (dictCategory) {
    return function (dictProfunctor) {
        return function (f) {
            return rmap(dictProfunctor)(f)(Control_Category.id(dictCategory));
        };
    };
};
module.exports = {
    Profunctor: Profunctor, 
    arr: arr, 
    dimap: dimap, 
    lmap: lmap, 
    rmap: rmap, 
    unwrapIso: unwrapIso, 
    wrapIso: wrapIso, 
    profunctorFn: profunctorFn
};
